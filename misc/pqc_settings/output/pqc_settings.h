/**************************************************************************
**                                                                      **
** Copyright (C) 2011-2025 Lukas Spies                                  **
** Contact: https://photoqt.org                                         **
**                                                                      **
** This file is part of PhotoQt.                                        **
**                                                                      **
** PhotoQt is free software: you can redistribute it and/or modify      **
** it under the terms of the GNU General Public License as published by **
** the Free Software Foundation, either version 2 of the License, or    **
** (at your option) any later version.                                  **
**                                                                      **
** PhotoQt is distributed in the hope that it will be useful,           **
** but WITHOUT ANY WARRANTY; without even the implied warranty of       **
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        **
** GNU General Public License for more details.                         **
**                                                                      **
** You should have received a copy of the GNU General Public License    **
** along with PhotoQt. If not, see <http://www.gnu.org/licenses/>.      **
**                                                                      **
**************************************************************************/


/**//**//**//**//**//**//**//**//**//**//**//**//**//**//**/
//
// WARNING
// THIS FILE IS AUTO GENERATED BY `misc/pqc_settings.py`.
// ANY CHANGES HERE WILL BE OVERWRITTEN AT SOME POINT!
//
/**//**//**//**//**//**//**//**//**//**//**//**//**//**//**/


#ifndef PQCSETTINGS_H
#define PQCSETTINGS_H

#include <QObject>
#include <QtSql>
#include <QQmlPropertyMap>

class PQCSettings : public QQmlPropertyMap {

    Q_OBJECT
    QML_ELEMENT
    QML_SINGLETON

public:
    explicit PQCSettings();
    ~PQCSettings();

    /**************************************/
    // table: filedialog

    Q_PROPERTY(bool filedialogDetailsTooltip READ getFiledialogDetailsTooltip WRITE setFiledialogDetailsTooltip NOTIFY filedialogDetailsTooltipChanged)
    bool getFiledialogDetailsTooltip();
    void setFiledialogDetailsTooltip();
    void setDefaultForFiledialogDetailsTooltip();

    Q_PROPERTY(bool filedialogDevices READ getFiledialogDevices WRITE setFiledialogDevices NOTIFY filedialogDevicesChanged)
    bool getFiledialogDevices();
    void setFiledialogDevices();
    void setDefaultForFiledialogDevices();

    Q_PROPERTY(bool filedialogDevicesShowTmpfs READ getFiledialogDevicesShowTmpfs WRITE setFiledialogDevicesShowTmpfs NOTIFY filedialogDevicesShowTmpfsChanged)
    bool getFiledialogDevicesShowTmpfs();
    void setFiledialogDevicesShowTmpfs();
    void setDefaultForFiledialogDevicesShowTmpfs();

    Q_PROPERTY(bool filedialogDragDropFileviewGrid READ getFiledialogDragDropFileviewGrid WRITE setFiledialogDragDropFileviewGrid NOTIFY filedialogDragDropFileviewGridChanged)
    bool getFiledialogDragDropFileviewGrid();
    void setFiledialogDragDropFileviewGrid();
    void setDefaultForFiledialogDragDropFileviewGrid();

    Q_PROPERTY(bool filedialogDragDropFileviewList READ getFiledialogDragDropFileviewList WRITE setFiledialogDragDropFileviewList NOTIFY filedialogDragDropFileviewListChanged)
    bool getFiledialogDragDropFileviewList();
    void setFiledialogDragDropFileviewList();
    void setDefaultForFiledialogDragDropFileviewList();

    Q_PROPERTY(bool filedialogDragDropFileviewMasonry READ getFiledialogDragDropFileviewMasonry WRITE setFiledialogDragDropFileviewMasonry NOTIFY filedialogDragDropFileviewMasonryChanged)
    bool getFiledialogDragDropFileviewMasonry();
    void setFiledialogDragDropFileviewMasonry();
    void setDefaultForFiledialogDragDropFileviewMasonry();

    Q_PROPERTY(bool filedialogDragDropPlaces READ getFiledialogDragDropPlaces WRITE setFiledialogDragDropPlaces NOTIFY filedialogDragDropPlacesChanged)
    bool getFiledialogDragDropPlaces();
    void setFiledialogDragDropPlaces();
    void setDefaultForFiledialogDragDropPlaces();

    Q_PROPERTY(int filedialogElementPadding READ getFiledialogElementPadding WRITE setFiledialogElementPadding NOTIFY filedialogElementPaddingChanged)
    int getFiledialogElementPadding();
    void setFiledialogElementPadding();
    void setDefaultForFiledialogElementPadding();

    Q_PROPERTY(bool filedialogFolderContentThumbnails READ getFiledialogFolderContentThumbnails WRITE setFiledialogFolderContentThumbnails NOTIFY filedialogFolderContentThumbnailsChanged)
    bool getFiledialogFolderContentThumbnails();
    void setFiledialogFolderContentThumbnails();
    void setDefaultForFiledialogFolderContentThumbnails();

    Q_PROPERTY(bool filedialogFolderContentThumbnailsAutoload READ getFiledialogFolderContentThumbnailsAutoload WRITE setFiledialogFolderContentThumbnailsAutoload NOTIFY filedialogFolderContentThumbnailsAutoloadChanged)
    bool getFiledialogFolderContentThumbnailsAutoload();
    void setFiledialogFolderContentThumbnailsAutoload();
    void setDefaultForFiledialogFolderContentThumbnailsAutoload();

    Q_PROPERTY(bool filedialogFolderContentThumbnailsLoop READ getFiledialogFolderContentThumbnailsLoop WRITE setFiledialogFolderContentThumbnailsLoop NOTIFY filedialogFolderContentThumbnailsLoopChanged)
    bool getFiledialogFolderContentThumbnailsLoop();
    void setFiledialogFolderContentThumbnailsLoop();
    void setDefaultForFiledialogFolderContentThumbnailsLoop();

    Q_PROPERTY(bool filedialogFolderContentThumbnailsScaleCrop READ getFiledialogFolderContentThumbnailsScaleCrop WRITE setFiledialogFolderContentThumbnailsScaleCrop NOTIFY filedialogFolderContentThumbnailsScaleCropChanged)
    bool getFiledialogFolderContentThumbnailsScaleCrop();
    void setFiledialogFolderContentThumbnailsScaleCrop();
    void setDefaultForFiledialogFolderContentThumbnailsScaleCrop();

    Q_PROPERTY(int filedialogFolderContentThumbnailsSpeed READ getFiledialogFolderContentThumbnailsSpeed WRITE setFiledialogFolderContentThumbnailsSpeed NOTIFY filedialogFolderContentThumbnailsSpeedChanged)
    int getFiledialogFolderContentThumbnailsSpeed();
    void setFiledialogFolderContentThumbnailsSpeed();
    void setDefaultForFiledialogFolderContentThumbnailsSpeed();

    Q_PROPERTY(bool filedialogKeepLastLocation READ getFiledialogKeepLastLocation WRITE setFiledialogKeepLastLocation NOTIFY filedialogKeepLastLocationChanged)
    bool getFiledialogKeepLastLocation();
    void setFiledialogKeepLastLocation();
    void setDefaultForFiledialogKeepLastLocation();

    Q_PROPERTY(bool filedialogLabelsShowGrid READ getFiledialogLabelsShowGrid WRITE setFiledialogLabelsShowGrid NOTIFY filedialogLabelsShowGridChanged)
    bool getFiledialogLabelsShowGrid();
    void setFiledialogLabelsShowGrid();
    void setDefaultForFiledialogLabelsShowGrid();

    Q_PROPERTY(bool filedialogLabelsShowMasonry READ getFiledialogLabelsShowMasonry WRITE setFiledialogLabelsShowMasonry NOTIFY filedialogLabelsShowMasonryChanged)
    bool getFiledialogLabelsShowMasonry();
    void setFiledialogLabelsShowMasonry();
    void setDefaultForFiledialogLabelsShowMasonry();

    Q_PROPERTY(QString filedialogLayout READ getFiledialogLayout WRITE setFiledialogLayout NOTIFY filedialogLayoutChanged)
    QString getFiledialogLayout();
    void setFiledialogLayout();
    void setDefaultForFiledialogLayout();

    Q_PROPERTY(bool filedialogPlaces READ getFiledialogPlaces WRITE setFiledialogPlaces NOTIFY filedialogPlacesChanged)
    bool getFiledialogPlaces();
    void setFiledialogPlaces();
    void setDefaultForFiledialogPlaces();

    Q_PROPERTY(int filedialogPlacesWidth READ getFiledialogPlacesWidth WRITE setFiledialogPlacesWidth NOTIFY filedialogPlacesWidthChanged)
    int getFiledialogPlacesWidth();
    void setFiledialogPlacesWidth();
    void setDefaultForFiledialogPlacesWidth();

    Q_PROPERTY(bool filedialogPreview READ getFiledialogPreview WRITE setFiledialogPreview NOTIFY filedialogPreviewChanged)
    bool getFiledialogPreview();
    void setFiledialogPreview();
    void setDefaultForFiledialogPreview();

    Q_PROPERTY(bool filedialogPreviewBlur READ getFiledialogPreviewBlur WRITE setFiledialogPreviewBlur NOTIFY filedialogPreviewBlurChanged)
    bool getFiledialogPreviewBlur();
    void setFiledialogPreviewBlur();
    void setDefaultForFiledialogPreviewBlur();

    Q_PROPERTY(int filedialogPreviewColorIntensity READ getFiledialogPreviewColorIntensity WRITE setFiledialogPreviewColorIntensity NOTIFY filedialogPreviewColorIntensityChanged)
    int getFiledialogPreviewColorIntensity();
    void setFiledialogPreviewColorIntensity();
    void setDefaultForFiledialogPreviewColorIntensity();

    Q_PROPERTY(bool filedialogPreviewCropToFit READ getFiledialogPreviewCropToFit WRITE setFiledialogPreviewCropToFit NOTIFY filedialogPreviewCropToFitChanged)
    bool getFiledialogPreviewCropToFit();
    void setFiledialogPreviewCropToFit();
    void setDefaultForFiledialogPreviewCropToFit();

    Q_PROPERTY(bool filedialogPreviewHigherResolution READ getFiledialogPreviewHigherResolution WRITE setFiledialogPreviewHigherResolution NOTIFY filedialogPreviewHigherResolutionChanged)
    bool getFiledialogPreviewHigherResolution();
    void setFiledialogPreviewHigherResolution();
    void setDefaultForFiledialogPreviewHigherResolution();

    Q_PROPERTY(bool filedialogPreviewMuted READ getFiledialogPreviewMuted WRITE setFiledialogPreviewMuted NOTIFY filedialogPreviewMutedChanged)
    bool getFiledialogPreviewMuted();
    void setFiledialogPreviewMuted();
    void setDefaultForFiledialogPreviewMuted();

    Q_PROPERTY(bool filedialogRememberSelection READ getFiledialogRememberSelection WRITE setFiledialogRememberSelection NOTIFY filedialogRememberSelectionChanged)
    bool getFiledialogRememberSelection();
    void setFiledialogRememberSelection();
    void setDefaultForFiledialogRememberSelection();

    Q_PROPERTY(bool filedialogShowHiddenFilesFolders READ getFiledialogShowHiddenFilesFolders WRITE setFiledialogShowHiddenFilesFolders NOTIFY filedialogShowHiddenFilesFoldersChanged)
    bool getFiledialogShowHiddenFilesFolders();
    void setFiledialogShowHiddenFilesFolders();
    void setDefaultForFiledialogShowHiddenFilesFolders();

    Q_PROPERTY(bool filedialogSingleClickSelect READ getFiledialogSingleClickSelect WRITE setFiledialogSingleClickSelect NOTIFY filedialogSingleClickSelectChanged)
    bool getFiledialogSingleClickSelect();
    void setFiledialogSingleClickSelect();
    void setDefaultForFiledialogSingleClickSelect();

    Q_PROPERTY(bool filedialogThumbnails READ getFiledialogThumbnails WRITE setFiledialogThumbnails NOTIFY filedialogThumbnailsChanged)
    bool getFiledialogThumbnails();
    void setFiledialogThumbnails();
    void setDefaultForFiledialogThumbnails();

    Q_PROPERTY(bool filedialogThumbnailsScaleCrop READ getFiledialogThumbnailsScaleCrop WRITE setFiledialogThumbnailsScaleCrop NOTIFY filedialogThumbnailsScaleCropChanged)
    bool getFiledialogThumbnailsScaleCrop();
    void setFiledialogThumbnailsScaleCrop();
    void setDefaultForFiledialogThumbnailsScaleCrop();

    Q_PROPERTY(int filedialogZoom READ getFiledialogZoom WRITE setFiledialogZoom NOTIFY filedialogZoomChanged)
    int getFiledialogZoom();
    void setFiledialogZoom();
    void setDefaultForFiledialogZoom();

    /**************************************/
    // table: filetypes

    Q_PROPERTY(bool filetypesAnimatedControls READ getFiletypesAnimatedControls WRITE setFiletypesAnimatedControls NOTIFY filetypesAnimatedControlsChanged)
    bool getFiletypesAnimatedControls();
    void setFiletypesAnimatedControls();
    void setDefaultForFiletypesAnimatedControls();

    Q_PROPERTY(bool filetypesAnimatedLeftRight READ getFiletypesAnimatedLeftRight WRITE setFiletypesAnimatedLeftRight NOTIFY filetypesAnimatedLeftRightChanged)
    bool getFiletypesAnimatedLeftRight();
    void setFiletypesAnimatedLeftRight();
    void setDefaultForFiletypesAnimatedLeftRight();

    Q_PROPERTY(bool filetypesAnimatedSpacePause READ getFiletypesAnimatedSpacePause WRITE setFiletypesAnimatedSpacePause NOTIFY filetypesAnimatedSpacePauseChanged)
    bool getFiletypesAnimatedSpacePause();
    void setFiletypesAnimatedSpacePause();
    void setDefaultForFiletypesAnimatedSpacePause();

    Q_PROPERTY(bool filetypesArchiveControls READ getFiletypesArchiveControls WRITE setFiletypesArchiveControls NOTIFY filetypesArchiveControlsChanged)
    bool getFiletypesArchiveControls();
    void setFiletypesArchiveControls();
    void setDefaultForFiletypesArchiveControls();

    Q_PROPERTY(bool filetypesArchiveLeftRight READ getFiletypesArchiveLeftRight WRITE setFiletypesArchiveLeftRight NOTIFY filetypesArchiveLeftRightChanged)
    bool getFiletypesArchiveLeftRight();
    void setFiletypesArchiveLeftRight();
    void setDefaultForFiletypesArchiveLeftRight();

    Q_PROPERTY(bool filetypesDocumentControls READ getFiletypesDocumentControls WRITE setFiletypesDocumentControls NOTIFY filetypesDocumentControlsChanged)
    bool getFiletypesDocumentControls();
    void setFiletypesDocumentControls();
    void setDefaultForFiletypesDocumentControls();

    Q_PROPERTY(bool filetypesDocumentLeftRight READ getFiletypesDocumentLeftRight WRITE setFiletypesDocumentLeftRight NOTIFY filetypesDocumentLeftRightChanged)
    bool getFiletypesDocumentLeftRight();
    void setFiletypesDocumentLeftRight();
    void setDefaultForFiletypesDocumentLeftRight();

    Q_PROPERTY(bool filetypesExternalUnrar READ getFiletypesExternalUnrar WRITE setFiletypesExternalUnrar NOTIFY filetypesExternalUnrarChanged)
    bool getFiletypesExternalUnrar();
    void setFiletypesExternalUnrar();
    void setDefaultForFiletypesExternalUnrar();

    Q_PROPERTY(bool filetypesLoadAppleLivePhotos READ getFiletypesLoadAppleLivePhotos WRITE setFiletypesLoadAppleLivePhotos NOTIFY filetypesLoadAppleLivePhotosChanged)
    bool getFiletypesLoadAppleLivePhotos();
    void setFiletypesLoadAppleLivePhotos();
    void setDefaultForFiletypesLoadAppleLivePhotos();

    Q_PROPERTY(bool filetypesLoadMotionPhotos READ getFiletypesLoadMotionPhotos WRITE setFiletypesLoadMotionPhotos NOTIFY filetypesLoadMotionPhotosChanged)
    bool getFiletypesLoadMotionPhotos();
    void setFiletypesLoadMotionPhotos();
    void setDefaultForFiletypesLoadMotionPhotos();

    Q_PROPERTY(bool filetypesMotionAutoPlay READ getFiletypesMotionAutoPlay WRITE setFiletypesMotionAutoPlay NOTIFY filetypesMotionAutoPlayChanged)
    bool getFiletypesMotionAutoPlay();
    void setFiletypesMotionAutoPlay();
    void setDefaultForFiletypesMotionAutoPlay();

    Q_PROPERTY(bool filetypesMotionPhotoPlayPause READ getFiletypesMotionPhotoPlayPause WRITE setFiletypesMotionPhotoPlayPause NOTIFY filetypesMotionPhotoPlayPauseChanged)
    bool getFiletypesMotionPhotoPlayPause();
    void setFiletypesMotionPhotoPlayPause();
    void setDefaultForFiletypesMotionPhotoPlayPause();

    Q_PROPERTY(bool filetypesMotionSpacePause READ getFiletypesMotionSpacePause WRITE setFiletypesMotionSpacePause NOTIFY filetypesMotionSpacePauseChanged)
    bool getFiletypesMotionSpacePause();
    void setFiletypesMotionSpacePause();
    void setDefaultForFiletypesMotionSpacePause();

    Q_PROPERTY(int filetypesPDFQuality READ getFiletypesPDFQuality WRITE setFiletypesPDFQuality NOTIFY filetypesPDFQualityChanged)
    int getFiletypesPDFQuality();
    void setFiletypesPDFQuality();
    void setDefaultForFiletypesPDFQuality();

    Q_PROPERTY(bool filetypesPhotoSphereArrowKeys READ getFiletypesPhotoSphereArrowKeys WRITE setFiletypesPhotoSphereArrowKeys NOTIFY filetypesPhotoSphereArrowKeysChanged)
    bool getFiletypesPhotoSphereArrowKeys();
    void setFiletypesPhotoSphereArrowKeys();
    void setDefaultForFiletypesPhotoSphereArrowKeys();

    Q_PROPERTY(bool filetypesPhotoSphereAutoLoad READ getFiletypesPhotoSphereAutoLoad WRITE setFiletypesPhotoSphereAutoLoad NOTIFY filetypesPhotoSphereAutoLoadChanged)
    bool getFiletypesPhotoSphereAutoLoad();
    void setFiletypesPhotoSphereAutoLoad();
    void setDefaultForFiletypesPhotoSphereAutoLoad();

    Q_PROPERTY(bool filetypesPhotoSphereBigButton READ getFiletypesPhotoSphereBigButton WRITE setFiletypesPhotoSphereBigButton NOTIFY filetypesPhotoSphereBigButtonChanged)
    bool getFiletypesPhotoSphereBigButton();
    void setFiletypesPhotoSphereBigButton();
    void setDefaultForFiletypesPhotoSphereBigButton();

    Q_PROPERTY(bool filetypesPhotoSphereControls READ getFiletypesPhotoSphereControls WRITE setFiletypesPhotoSphereControls NOTIFY filetypesPhotoSphereControlsChanged)
    bool getFiletypesPhotoSphereControls();
    void setFiletypesPhotoSphereControls();
    void setDefaultForFiletypesPhotoSphereControls();

    Q_PROPERTY(bool filetypesPhotoSpherePanOnLoad READ getFiletypesPhotoSpherePanOnLoad WRITE setFiletypesPhotoSpherePanOnLoad NOTIFY filetypesPhotoSpherePanOnLoadChanged)
    bool getFiletypesPhotoSpherePanOnLoad();
    void setFiletypesPhotoSpherePanOnLoad();
    void setDefaultForFiletypesPhotoSpherePanOnLoad();

    Q_PROPERTY(bool filetypesRAWUseEmbeddedIfAvailable READ getFiletypesRAWUseEmbeddedIfAvailable WRITE setFiletypesRAWUseEmbeddedIfAvailable NOTIFY filetypesRAWUseEmbeddedIfAvailableChanged)
    bool getFiletypesRAWUseEmbeddedIfAvailable();
    void setFiletypesRAWUseEmbeddedIfAvailable();
    void setDefaultForFiletypesRAWUseEmbeddedIfAvailable();

    Q_PROPERTY(bool filetypesVideoAutoplay READ getFiletypesVideoAutoplay WRITE setFiletypesVideoAutoplay NOTIFY filetypesVideoAutoplayChanged)
    bool getFiletypesVideoAutoplay();
    void setFiletypesVideoAutoplay();
    void setDefaultForFiletypesVideoAutoplay();

    Q_PROPERTY(bool filetypesVideoLeftRightJumpVideo READ getFiletypesVideoLeftRightJumpVideo WRITE setFiletypesVideoLeftRightJumpVideo NOTIFY filetypesVideoLeftRightJumpVideoChanged)
    bool getFiletypesVideoLeftRightJumpVideo();
    void setFiletypesVideoLeftRightJumpVideo();
    void setDefaultForFiletypesVideoLeftRightJumpVideo();

    Q_PROPERTY(bool filetypesVideoLoop READ getFiletypesVideoLoop WRITE setFiletypesVideoLoop NOTIFY filetypesVideoLoopChanged)
    bool getFiletypesVideoLoop();
    void setFiletypesVideoLoop();
    void setDefaultForFiletypesVideoLoop();

    Q_PROPERTY(bool filetypesVideoPreferLibmpv READ getFiletypesVideoPreferLibmpv WRITE setFiletypesVideoPreferLibmpv NOTIFY filetypesVideoPreferLibmpvChanged)
    bool getFiletypesVideoPreferLibmpv();
    void setFiletypesVideoPreferLibmpv();
    void setDefaultForFiletypesVideoPreferLibmpv();

    Q_PROPERTY(bool filetypesVideoSpacePause READ getFiletypesVideoSpacePause WRITE setFiletypesVideoSpacePause NOTIFY filetypesVideoSpacePauseChanged)
    bool getFiletypesVideoSpacePause();
    void setFiletypesVideoSpacePause();
    void setDefaultForFiletypesVideoSpacePause();

    Q_PROPERTY(QString filetypesVideoThumbnailer READ getFiletypesVideoThumbnailer WRITE setFiletypesVideoThumbnailer NOTIFY filetypesVideoThumbnailerChanged)
    QString getFiletypesVideoThumbnailer();
    void setFiletypesVideoThumbnailer();
    void setDefaultForFiletypesVideoThumbnailer();

    Q_PROPERTY(int filetypesVideoVolume READ getFiletypesVideoVolume WRITE setFiletypesVideoVolume NOTIFY filetypesVideoVolumeChanged)
    int getFiletypesVideoVolume();
    void setFiletypesVideoVolume();
    void setDefaultForFiletypesVideoVolume();

    /**************************************/
    // table: general

    Q_PROPERTY(bool generalAutoSaveSettings READ getGeneralAutoSaveSettings WRITE setGeneralAutoSaveSettings NOTIFY generalAutoSaveSettingsChanged)
    bool getGeneralAutoSaveSettings();
    void setGeneralAutoSaveSettings();
    void setDefaultForGeneralAutoSaveSettings();

    Q_PROPERTY(bool generalCompactSettings READ getGeneralCompactSettings WRITE setGeneralCompactSettings NOTIFY generalCompactSettingsChanged)
    bool getGeneralCompactSettings();
    void setGeneralCompactSettings();
    void setDefaultForGeneralCompactSettings();

    Q_PROPERTY(QString generalVersion READ getGeneralVersion WRITE setGeneralVersion NOTIFY generalVersionChanged)
    QString getGeneralVersion();
    void setGeneralVersion();
    void setDefaultForGeneralVersion();

    /**************************************/
    // table: imageview

    Q_PROPERTY(bool imageviewAdvancedSortAscending READ getImageviewAdvancedSortAscending WRITE setImageviewAdvancedSortAscending NOTIFY imageviewAdvancedSortAscendingChanged)
    bool getImageviewAdvancedSortAscending();
    void setImageviewAdvancedSortAscending();
    void setDefaultForImageviewAdvancedSortAscending();

    Q_PROPERTY(QString imageviewAdvancedSortCriteria READ getImageviewAdvancedSortCriteria WRITE setImageviewAdvancedSortCriteria NOTIFY imageviewAdvancedSortCriteriaChanged)
    QString getImageviewAdvancedSortCriteria();
    void setImageviewAdvancedSortCriteria();
    void setDefaultForImageviewAdvancedSortCriteria();

    Q_PROPERTY(QStringList imageviewAdvancedSortDateCriteria READ getImageviewAdvancedSortDateCriteria WRITE setImageviewAdvancedSortDateCriteria NOTIFY imageviewAdvancedSortDateCriteriaChanged)
    QStringList getImageviewAdvancedSortDateCriteria();
    void setImageviewAdvancedSortDateCriteria();
    void setDefaultForImageviewAdvancedSortDateCriteria();

    Q_PROPERTY(QString imageviewAdvancedSortQuality READ getImageviewAdvancedSortQuality WRITE setImageviewAdvancedSortQuality NOTIFY imageviewAdvancedSortQualityChanged)
    QString getImageviewAdvancedSortQuality();
    void setImageviewAdvancedSortQuality();
    void setDefaultForImageviewAdvancedSortQuality();

    Q_PROPERTY(bool imageviewAlwaysActualSize READ getImageviewAlwaysActualSize WRITE setImageviewAlwaysActualSize NOTIFY imageviewAlwaysActualSizeChanged)
    bool getImageviewAlwaysActualSize();
    void setImageviewAlwaysActualSize();
    void setDefaultForImageviewAlwaysActualSize();

    Q_PROPERTY(int imageviewAnimationDuration READ getImageviewAnimationDuration WRITE setImageviewAnimationDuration NOTIFY imageviewAnimationDurationChanged)
    int getImageviewAnimationDuration();
    void setImageviewAnimationDuration();
    void setDefaultForImageviewAnimationDuration();

    Q_PROPERTY(QString imageviewAnimationType READ getImageviewAnimationType WRITE setImageviewAnimationType NOTIFY imageviewAnimationTypeChanged)
    QString getImageviewAnimationType();
    void setImageviewAnimationType();
    void setDefaultForImageviewAnimationType();

    Q_PROPERTY(int imageviewCache READ getImageviewCache WRITE setImageviewCache NOTIFY imageviewCacheChanged)
    int getImageviewCache();
    void setImageviewCache();
    void setDefaultForImageviewCache();

    Q_PROPERTY(QStringList imageviewColorSpaceContextMenu READ getImageviewColorSpaceContextMenu WRITE setImageviewColorSpaceContextMenu NOTIFY imageviewColorSpaceContextMenuChanged)
    QStringList getImageviewColorSpaceContextMenu();
    void setImageviewColorSpaceContextMenu();
    void setDefaultForImageviewColorSpaceContextMenu();

    Q_PROPERTY(QString imageviewColorSpaceDefault READ getImageviewColorSpaceDefault WRITE setImageviewColorSpaceDefault NOTIFY imageviewColorSpaceDefaultChanged)
    QString getImageviewColorSpaceDefault();
    void setImageviewColorSpaceDefault();
    void setDefaultForImageviewColorSpaceDefault();

    Q_PROPERTY(bool imageviewColorSpaceEnable READ getImageviewColorSpaceEnable WRITE setImageviewColorSpaceEnable NOTIFY imageviewColorSpaceEnableChanged)
    bool getImageviewColorSpaceEnable();
    void setImageviewColorSpaceEnable();
    void setDefaultForImageviewColorSpaceEnable();

    Q_PROPERTY(bool imageviewColorSpaceLoadEmbedded READ getImageviewColorSpaceLoadEmbedded WRITE setImageviewColorSpaceLoadEmbedded NOTIFY imageviewColorSpaceLoadEmbeddedChanged)
    bool getImageviewColorSpaceLoadEmbedded();
    void setImageviewColorSpaceLoadEmbedded();
    void setDefaultForImageviewColorSpaceLoadEmbedded();

    Q_PROPERTY(bool imageviewEscapeExitArchive READ getImageviewEscapeExitArchive WRITE setImageviewEscapeExitArchive NOTIFY imageviewEscapeExitArchiveChanged)
    bool getImageviewEscapeExitArchive();
    void setImageviewEscapeExitArchive();
    void setDefaultForImageviewEscapeExitArchive();

    Q_PROPERTY(bool imageviewEscapeExitBarcodes READ getImageviewEscapeExitBarcodes WRITE setImageviewEscapeExitBarcodes NOTIFY imageviewEscapeExitBarcodesChanged)
    bool getImageviewEscapeExitBarcodes();
    void setImageviewEscapeExitBarcodes();
    void setDefaultForImageviewEscapeExitBarcodes();

    Q_PROPERTY(bool imageviewEscapeExitDocument READ getImageviewEscapeExitDocument WRITE setImageviewEscapeExitDocument NOTIFY imageviewEscapeExitDocumentChanged)
    bool getImageviewEscapeExitDocument();
    void setImageviewEscapeExitDocument();
    void setDefaultForImageviewEscapeExitDocument();

    Q_PROPERTY(bool imageviewEscapeExitFilter READ getImageviewEscapeExitFilter WRITE setImageviewEscapeExitFilter NOTIFY imageviewEscapeExitFilterChanged)
    bool getImageviewEscapeExitFilter();
    void setImageviewEscapeExitFilter();
    void setDefaultForImageviewEscapeExitFilter();

    Q_PROPERTY(bool imageviewEscapeExitSphere READ getImageviewEscapeExitSphere WRITE setImageviewEscapeExitSphere NOTIFY imageviewEscapeExitSphereChanged)
    bool getImageviewEscapeExitSphere();
    void setImageviewEscapeExitSphere();
    void setDefaultForImageviewEscapeExitSphere();

    Q_PROPERTY(bool imageviewFitInWindow READ getImageviewFitInWindow WRITE setImageviewFitInWindow NOTIFY imageviewFitInWindowChanged)
    bool getImageviewFitInWindow();
    void setImageviewFitInWindow();
    void setDefaultForImageviewFitInWindow();

    Q_PROPERTY(int imageviewHideCursorTimeout READ getImageviewHideCursorTimeout WRITE setImageviewHideCursorTimeout NOTIFY imageviewHideCursorTimeoutChanged)
    int getImageviewHideCursorTimeout();
    void setImageviewHideCursorTimeout();
    void setDefaultForImageviewHideCursorTimeout();

    Q_PROPERTY(bool imageviewInterpolationDisableForSmallImages READ getImageviewInterpolationDisableForSmallImages WRITE setImageviewInterpolationDisableForSmallImages NOTIFY imageviewInterpolationDisableForSmallImagesChanged)
    bool getImageviewInterpolationDisableForSmallImages();
    void setImageviewInterpolationDisableForSmallImages();
    void setDefaultForImageviewInterpolationDisableForSmallImages();

    Q_PROPERTY(int imageviewInterpolationThreshold READ getImageviewInterpolationThreshold WRITE setImageviewInterpolationThreshold NOTIFY imageviewInterpolationThresholdChanged)
    int getImageviewInterpolationThreshold();
    void setImageviewInterpolationThreshold();
    void setDefaultForImageviewInterpolationThreshold();

    Q_PROPERTY(bool imageviewLoopThroughFolder READ getImageviewLoopThroughFolder WRITE setImageviewLoopThroughFolder NOTIFY imageviewLoopThroughFolderChanged)
    bool getImageviewLoopThroughFolder();
    void setImageviewLoopThroughFolder();
    void setDefaultForImageviewLoopThroughFolder();

    Q_PROPERTY(int imageviewMargin READ getImageviewMargin WRITE setImageviewMargin NOTIFY imageviewMarginChanged)
    int getImageviewMargin();
    void setImageviewMargin();
    void setDefaultForImageviewMargin();

    Q_PROPERTY(int imageviewMinimapSizeLevel READ getImageviewMinimapSizeLevel WRITE setImageviewMinimapSizeLevel NOTIFY imageviewMinimapSizeLevelChanged)
    int getImageviewMinimapSizeLevel();
    void setImageviewMinimapSizeLevel();
    void setDefaultForImageviewMinimapSizeLevel();

    Q_PROPERTY(bool imageviewMirrorAnimate READ getImageviewMirrorAnimate WRITE setImageviewMirrorAnimate NOTIFY imageviewMirrorAnimateChanged)
    bool getImageviewMirrorAnimate();
    void setImageviewMirrorAnimate();
    void setDefaultForImageviewMirrorAnimate();

    Q_PROPERTY(int imageviewPreloadInBackground READ getImageviewPreloadInBackground WRITE setImageviewPreloadInBackground NOTIFY imageviewPreloadInBackgroundChanged)
    int getImageviewPreloadInBackground();
    void setImageviewPreloadInBackground();
    void setDefaultForImageviewPreloadInBackground();

    Q_PROPERTY(bool imageviewPreserveMirror READ getImageviewPreserveMirror WRITE setImageviewPreserveMirror NOTIFY imageviewPreserveMirrorChanged)
    bool getImageviewPreserveMirror();
    void setImageviewPreserveMirror();
    void setDefaultForImageviewPreserveMirror();

    Q_PROPERTY(bool imageviewPreserveRotation READ getImageviewPreserveRotation WRITE setImageviewPreserveRotation NOTIFY imageviewPreserveRotationChanged)
    bool getImageviewPreserveRotation();
    void setImageviewPreserveRotation();
    void setDefaultForImageviewPreserveRotation();

    Q_PROPERTY(bool imageviewPreserveZoom READ getImageviewPreserveZoom WRITE setImageviewPreserveZoom NOTIFY imageviewPreserveZoomChanged)
    bool getImageviewPreserveZoom();
    void setImageviewPreserveZoom();
    void setDefaultForImageviewPreserveZoom();

    Q_PROPERTY(bool imageviewRememberZoomRotationMirror READ getImageviewRememberZoomRotationMirror WRITE setImageviewRememberZoomRotationMirror NOTIFY imageviewRememberZoomRotationMirrorChanged)
    bool getImageviewRememberZoomRotationMirror();
    void setImageviewRememberZoomRotationMirror();
    void setDefaultForImageviewRememberZoomRotationMirror();

    Q_PROPERTY(int imageviewResetViewAutoHideTimeout READ getImageviewResetViewAutoHideTimeout WRITE setImageviewResetViewAutoHideTimeout NOTIFY imageviewResetViewAutoHideTimeoutChanged)
    int getImageviewResetViewAutoHideTimeout();
    void setImageviewResetViewAutoHideTimeout();
    void setDefaultForImageviewResetViewAutoHideTimeout();

    Q_PROPERTY(bool imageviewResetViewShow READ getImageviewResetViewShow WRITE setImageviewResetViewShow NOTIFY imageviewResetViewShowChanged)
    bool getImageviewResetViewShow();
    void setImageviewResetViewShow();
    void setDefaultForImageviewResetViewShow();

    Q_PROPERTY(bool imageviewRespectDevicePixelRatio READ getImageviewRespectDevicePixelRatio WRITE setImageviewRespectDevicePixelRatio NOTIFY imageviewRespectDevicePixelRatioChanged)
    bool getImageviewRespectDevicePixelRatio();
    void setImageviewRespectDevicePixelRatio();
    void setDefaultForImageviewRespectDevicePixelRatio();

    Q_PROPERTY(bool imageviewShowMinimap READ getImageviewShowMinimap WRITE setImageviewShowMinimap NOTIFY imageviewShowMinimapChanged)
    bool getImageviewShowMinimap();
    void setImageviewShowMinimap();
    void setDefaultForImageviewShowMinimap();

    Q_PROPERTY(bool imageviewSortImagesAscending READ getImageviewSortImagesAscending WRITE setImageviewSortImagesAscending NOTIFY imageviewSortImagesAscendingChanged)
    bool getImageviewSortImagesAscending();
    void setImageviewSortImagesAscending();
    void setDefaultForImageviewSortImagesAscending();

    Q_PROPERTY(QString imageviewSortImagesBy READ getImageviewSortImagesBy WRITE setImageviewSortImagesBy NOTIFY imageviewSortImagesByChanged)
    QString getImageviewSortImagesBy();
    void setImageviewSortImagesBy();
    void setDefaultForImageviewSortImagesBy();

    Q_PROPERTY(bool imageviewTransparencyMarker READ getImageviewTransparencyMarker WRITE setImageviewTransparencyMarker NOTIFY imageviewTransparencyMarkerChanged)
    bool getImageviewTransparencyMarker();
    void setImageviewTransparencyMarker();
    void setDefaultForImageviewTransparencyMarker();

    Q_PROPERTY(bool imageviewUseMouseLeftButtonForImageMove READ getImageviewUseMouseLeftButtonForImageMove WRITE setImageviewUseMouseLeftButtonForImageMove NOTIFY imageviewUseMouseLeftButtonForImageMoveChanged)
    bool getImageviewUseMouseLeftButtonForImageMove();
    void setImageviewUseMouseLeftButtonForImageMove();
    void setDefaultForImageviewUseMouseLeftButtonForImageMove();

    Q_PROPERTY(bool imageviewUseMouseWheelForImageMove READ getImageviewUseMouseWheelForImageMove WRITE setImageviewUseMouseWheelForImageMove NOTIFY imageviewUseMouseWheelForImageMoveChanged)
    bool getImageviewUseMouseWheelForImageMove();
    void setImageviewUseMouseWheelForImageMove();
    void setDefaultForImageviewUseMouseWheelForImageMove();

    Q_PROPERTY(int imageviewZoomMax READ getImageviewZoomMax WRITE setImageviewZoomMax NOTIFY imageviewZoomMaxChanged)
    int getImageviewZoomMax();
    void setImageviewZoomMax();
    void setDefaultForImageviewZoomMax();

    Q_PROPERTY(bool imageviewZoomMaxEnabled READ getImageviewZoomMaxEnabled WRITE setImageviewZoomMaxEnabled NOTIFY imageviewZoomMaxEnabledChanged)
    bool getImageviewZoomMaxEnabled();
    void setImageviewZoomMaxEnabled();
    void setDefaultForImageviewZoomMaxEnabled();

    Q_PROPERTY(int imageviewZoomMin READ getImageviewZoomMin WRITE setImageviewZoomMin NOTIFY imageviewZoomMinChanged)
    int getImageviewZoomMin();
    void setImageviewZoomMin();
    void setDefaultForImageviewZoomMin();

    Q_PROPERTY(bool imageviewZoomMinEnabled READ getImageviewZoomMinEnabled WRITE setImageviewZoomMinEnabled NOTIFY imageviewZoomMinEnabledChanged)
    bool getImageviewZoomMinEnabled();
    void setImageviewZoomMinEnabled();
    void setDefaultForImageviewZoomMinEnabled();

    Q_PROPERTY(int imageviewZoomSpeed READ getImageviewZoomSpeed WRITE setImageviewZoomSpeed NOTIFY imageviewZoomSpeedChanged)
    int getImageviewZoomSpeed();
    void setImageviewZoomSpeed();
    void setDefaultForImageviewZoomSpeed();

    Q_PROPERTY(bool imageviewZoomSpeedRelative READ getImageviewZoomSpeedRelative WRITE setImageviewZoomSpeedRelative NOTIFY imageviewZoomSpeedRelativeChanged)
    bool getImageviewZoomSpeedRelative();
    void setImageviewZoomSpeedRelative();
    void setDefaultForImageviewZoomSpeedRelative();

    Q_PROPERTY(bool imageviewZoomToCenter READ getImageviewZoomToCenter WRITE setImageviewZoomToCenter NOTIFY imageviewZoomToCenterChanged)
    bool getImageviewZoomToCenter();
    void setImageviewZoomToCenter();
    void setDefaultForImageviewZoomToCenter();

    /**************************************/
    // table: interface

    Q_PROPERTY(QString interfaceAccentColor READ getInterfaceAccentColor WRITE setInterfaceAccentColor NOTIFY interfaceAccentColorChanged)
    QString getInterfaceAccentColor();
    void setInterfaceAccentColor();
    void setDefaultForInterfaceAccentColor();

    Q_PROPERTY(bool interfaceAllowMultipleInstances READ getInterfaceAllowMultipleInstances WRITE setInterfaceAllowMultipleInstances NOTIFY interfaceAllowMultipleInstancesChanged)
    bool getInterfaceAllowMultipleInstances();
    void setInterfaceAllowMultipleInstances();
    void setDefaultForInterfaceAllowMultipleInstances();

    Q_PROPERTY(bool interfaceBackgroundCustomOverlay READ getInterfaceBackgroundCustomOverlay WRITE setInterfaceBackgroundCustomOverlay NOTIFY interfaceBackgroundCustomOverlayChanged)
    bool getInterfaceBackgroundCustomOverlay();
    void setInterfaceBackgroundCustomOverlay();
    void setDefaultForInterfaceBackgroundCustomOverlay();

    Q_PROPERTY(QString interfaceBackgroundCustomOverlayColor READ getInterfaceBackgroundCustomOverlayColor WRITE setInterfaceBackgroundCustomOverlayColor NOTIFY interfaceBackgroundCustomOverlayColorChanged)
    QString getInterfaceBackgroundCustomOverlayColor();
    void setInterfaceBackgroundCustomOverlayColor();
    void setDefaultForInterfaceBackgroundCustomOverlayColor();

    Q_PROPERTY(bool interfaceBackgroundFullyTransparent READ getInterfaceBackgroundFullyTransparent WRITE setInterfaceBackgroundFullyTransparent NOTIFY interfaceBackgroundFullyTransparentChanged)
    bool getInterfaceBackgroundFullyTransparent();
    void setInterfaceBackgroundFullyTransparent();
    void setDefaultForInterfaceBackgroundFullyTransparent();

    Q_PROPERTY(bool interfaceBackgroundImageCenter READ getInterfaceBackgroundImageCenter WRITE setInterfaceBackgroundImageCenter NOTIFY interfaceBackgroundImageCenterChanged)
    bool getInterfaceBackgroundImageCenter();
    void setInterfaceBackgroundImageCenter();
    void setDefaultForInterfaceBackgroundImageCenter();

    Q_PROPERTY(QString interfaceBackgroundImagePath READ getInterfaceBackgroundImagePath WRITE setInterfaceBackgroundImagePath NOTIFY interfaceBackgroundImagePathChanged)
    QString getInterfaceBackgroundImagePath();
    void setInterfaceBackgroundImagePath();
    void setDefaultForInterfaceBackgroundImagePath();

    Q_PROPERTY(bool interfaceBackgroundImageScale READ getInterfaceBackgroundImageScale WRITE setInterfaceBackgroundImageScale NOTIFY interfaceBackgroundImageScaleChanged)
    bool getInterfaceBackgroundImageScale();
    void setInterfaceBackgroundImageScale();
    void setDefaultForInterfaceBackgroundImageScale();

    Q_PROPERTY(bool interfaceBackgroundImageScaleCrop READ getInterfaceBackgroundImageScaleCrop WRITE setInterfaceBackgroundImageScaleCrop NOTIFY interfaceBackgroundImageScaleCropChanged)
    bool getInterfaceBackgroundImageScaleCrop();
    void setInterfaceBackgroundImageScaleCrop();
    void setDefaultForInterfaceBackgroundImageScaleCrop();

    Q_PROPERTY(bool interfaceBackgroundImageScreenshot READ getInterfaceBackgroundImageScreenshot WRITE setInterfaceBackgroundImageScreenshot NOTIFY interfaceBackgroundImageScreenshotChanged)
    bool getInterfaceBackgroundImageScreenshot();
    void setInterfaceBackgroundImageScreenshot();
    void setDefaultForInterfaceBackgroundImageScreenshot();

    Q_PROPERTY(bool interfaceBackgroundImageStretch READ getInterfaceBackgroundImageStretch WRITE setInterfaceBackgroundImageStretch NOTIFY interfaceBackgroundImageStretchChanged)
    bool getInterfaceBackgroundImageStretch();
    void setInterfaceBackgroundImageStretch();
    void setDefaultForInterfaceBackgroundImageStretch();

    Q_PROPERTY(bool interfaceBackgroundImageTile READ getInterfaceBackgroundImageTile WRITE setInterfaceBackgroundImageTile NOTIFY interfaceBackgroundImageTileChanged)
    bool getInterfaceBackgroundImageTile();
    void setInterfaceBackgroundImageTile();
    void setDefaultForInterfaceBackgroundImageTile();

    Q_PROPERTY(bool interfaceBackgroundImageUse READ getInterfaceBackgroundImageUse WRITE setInterfaceBackgroundImageUse NOTIFY interfaceBackgroundImageUseChanged)
    bool getInterfaceBackgroundImageUse();
    void setInterfaceBackgroundImageUse();
    void setDefaultForInterfaceBackgroundImageUse();

    Q_PROPERTY(bool interfaceBackgroundSolid READ getInterfaceBackgroundSolid WRITE setInterfaceBackgroundSolid NOTIFY interfaceBackgroundSolidChanged)
    bool getInterfaceBackgroundSolid();
    void setInterfaceBackgroundSolid();
    void setDefaultForInterfaceBackgroundSolid();

    Q_PROPERTY(bool interfaceBlurElementsInBackground READ getInterfaceBlurElementsInBackground WRITE setInterfaceBlurElementsInBackground NOTIFY interfaceBlurElementsInBackgroundChanged)
    bool getInterfaceBlurElementsInBackground();
    void setInterfaceBlurElementsInBackground();
    void setDefaultForInterfaceBlurElementsInBackground();

    Q_PROPERTY(bool interfaceCloseOnEmptyBackground READ getInterfaceCloseOnEmptyBackground WRITE setInterfaceCloseOnEmptyBackground NOTIFY interfaceCloseOnEmptyBackgroundChanged)
    bool getInterfaceCloseOnEmptyBackground();
    void setInterfaceCloseOnEmptyBackground();
    void setDefaultForInterfaceCloseOnEmptyBackground();

    Q_PROPERTY(int interfaceDoubleClickThreshold READ getInterfaceDoubleClickThreshold WRITE setInterfaceDoubleClickThreshold NOTIFY interfaceDoubleClickThresholdChanged)
    int getInterfaceDoubleClickThreshold();
    void setInterfaceDoubleClickThreshold();
    void setDefaultForInterfaceDoubleClickThreshold();

    Q_PROPERTY(QString interfaceEdgeBottomAction READ getInterfaceEdgeBottomAction WRITE setInterfaceEdgeBottomAction NOTIFY interfaceEdgeBottomActionChanged)
    QString getInterfaceEdgeBottomAction();
    void setInterfaceEdgeBottomAction();
    void setDefaultForInterfaceEdgeBottomAction();

    Q_PROPERTY(QString interfaceEdgeLeftAction READ getInterfaceEdgeLeftAction WRITE setInterfaceEdgeLeftAction NOTIFY interfaceEdgeLeftActionChanged)
    QString getInterfaceEdgeLeftAction();
    void setInterfaceEdgeLeftAction();
    void setDefaultForInterfaceEdgeLeftAction();

    Q_PROPERTY(QString interfaceEdgeRightAction READ getInterfaceEdgeRightAction WRITE setInterfaceEdgeRightAction NOTIFY interfaceEdgeRightActionChanged)
    QString getInterfaceEdgeRightAction();
    void setInterfaceEdgeRightAction();
    void setDefaultForInterfaceEdgeRightAction();

    Q_PROPERTY(QString interfaceEdgeTopAction READ getInterfaceEdgeTopAction WRITE setInterfaceEdgeTopAction NOTIFY interfaceEdgeTopActionChanged)
    QString getInterfaceEdgeTopAction();
    void setInterfaceEdgeTopAction();
    void setDefaultForInterfaceEdgeTopAction();

    Q_PROPERTY(int interfaceFontBoldWeight READ getInterfaceFontBoldWeight WRITE setInterfaceFontBoldWeight NOTIFY interfaceFontBoldWeightChanged)
    int getInterfaceFontBoldWeight();
    void setInterfaceFontBoldWeight();
    void setDefaultForInterfaceFontBoldWeight();

    Q_PROPERTY(int interfaceFontNormalWeight READ getInterfaceFontNormalWeight WRITE setInterfaceFontNormalWeight NOTIFY interfaceFontNormalWeightChanged)
    int getInterfaceFontNormalWeight();
    void setInterfaceFontNormalWeight();
    void setDefaultForInterfaceFontNormalWeight();

    Q_PROPERTY(int interfaceHotEdgeSize READ getInterfaceHotEdgeSize WRITE setInterfaceHotEdgeSize NOTIFY interfaceHotEdgeSizeChanged)
    int getInterfaceHotEdgeSize();
    void setInterfaceHotEdgeSize();
    void setDefaultForInterfaceHotEdgeSize();

    Q_PROPERTY(bool interfaceKeepWindowOnTop READ getInterfaceKeepWindowOnTop WRITE setInterfaceKeepWindowOnTop NOTIFY interfaceKeepWindowOnTopChanged)
    bool getInterfaceKeepWindowOnTop();
    void setInterfaceKeepWindowOnTop();
    void setDefaultForInterfaceKeepWindowOnTop();

    Q_PROPERTY(QString interfaceLanguage READ getInterfaceLanguage WRITE setInterfaceLanguage NOTIFY interfaceLanguageChanged)
    QString getInterfaceLanguage();
    void setInterfaceLanguage();
    void setDefaultForInterfaceLanguage();

    Q_PROPERTY(bool interfaceMinimapPopout READ getInterfaceMinimapPopout WRITE setInterfaceMinimapPopout NOTIFY interfaceMinimapPopoutChanged)
    bool getInterfaceMinimapPopout();
    void setInterfaceMinimapPopout();
    void setDefaultForInterfaceMinimapPopout();

    Q_PROPERTY(int interfaceMouseWheelSensitivity READ getInterfaceMouseWheelSensitivity WRITE setInterfaceMouseWheelSensitivity NOTIFY interfaceMouseWheelSensitivityChanged)
    int getInterfaceMouseWheelSensitivity();
    void setInterfaceMouseWheelSensitivity();
    void setDefaultForInterfaceMouseWheelSensitivity();

    Q_PROPERTY(bool interfaceNavigateOnEmptyBackground READ getInterfaceNavigateOnEmptyBackground WRITE setInterfaceNavigateOnEmptyBackground NOTIFY interfaceNavigateOnEmptyBackgroundChanged)
    bool getInterfaceNavigateOnEmptyBackground();
    void setInterfaceNavigateOnEmptyBackground();
    void setDefaultForInterfaceNavigateOnEmptyBackground();

    Q_PROPERTY(bool interfaceNavigationFloating READ getInterfaceNavigationFloating WRITE setInterfaceNavigationFloating NOTIFY interfaceNavigationFloatingChanged)
    bool getInterfaceNavigationFloating();
    void setInterfaceNavigationFloating();
    void setDefaultForInterfaceNavigationFloating();

    Q_PROPERTY(int interfaceNotificationDistanceFromEdge READ getInterfaceNotificationDistanceFromEdge WRITE setInterfaceNotificationDistanceFromEdge NOTIFY interfaceNotificationDistanceFromEdgeChanged)
    int getInterfaceNotificationDistanceFromEdge();
    void setInterfaceNotificationDistanceFromEdge();
    void setDefaultForInterfaceNotificationDistanceFromEdge();

    Q_PROPERTY(QString interfaceNotificationLocation READ getInterfaceNotificationLocation WRITE setInterfaceNotificationLocation NOTIFY interfaceNotificationLocationChanged)
    QString getInterfaceNotificationLocation();
    void setInterfaceNotificationLocation();
    void setDefaultForInterfaceNotificationLocation();

    Q_PROPERTY(bool interfaceNotificationTryNative READ getInterfaceNotificationTryNative WRITE setInterfaceNotificationTryNative NOTIFY interfaceNotificationTryNativeChanged)
    bool getInterfaceNotificationTryNative();
    void setInterfaceNotificationTryNative();
    void setDefaultForInterfaceNotificationTryNative();

    Q_PROPERTY(bool interfacePopoutAbout READ getInterfacePopoutAbout WRITE setInterfacePopoutAbout NOTIFY interfacePopoutAboutChanged)
    bool getInterfacePopoutAbout();
    void setInterfacePopoutAbout();
    void setDefaultForInterfacePopoutAbout();

    Q_PROPERTY(bool interfacePopoutAdvancedSort READ getInterfacePopoutAdvancedSort WRITE setInterfacePopoutAdvancedSort NOTIFY interfacePopoutAdvancedSortChanged)
    bool getInterfacePopoutAdvancedSort();
    void setInterfacePopoutAdvancedSort();
    void setDefaultForInterfacePopoutAdvancedSort();

    Q_PROPERTY(bool interfacePopoutChromecast READ getInterfacePopoutChromecast WRITE setInterfacePopoutChromecast NOTIFY interfacePopoutChromecastChanged)
    bool getInterfacePopoutChromecast();
    void setInterfacePopoutChromecast();
    void setDefaultForInterfacePopoutChromecast();

    Q_PROPERTY(bool interfacePopoutExport READ getInterfacePopoutExport WRITE setInterfacePopoutExport NOTIFY interfacePopoutExportChanged)
    bool getInterfacePopoutExport();
    void setInterfacePopoutExport();
    void setDefaultForInterfacePopoutExport();

    Q_PROPERTY(bool interfacePopoutFileDelete READ getInterfacePopoutFileDelete WRITE setInterfacePopoutFileDelete NOTIFY interfacePopoutFileDeleteChanged)
    bool getInterfacePopoutFileDelete();
    void setInterfacePopoutFileDelete();
    void setDefaultForInterfacePopoutFileDelete();

    Q_PROPERTY(bool interfacePopoutFileDialog READ getInterfacePopoutFileDialog WRITE setInterfacePopoutFileDialog NOTIFY interfacePopoutFileDialogChanged)
    bool getInterfacePopoutFileDialog();
    void setInterfacePopoutFileDialog();
    void setDefaultForInterfacePopoutFileDialog();

    Q_PROPERTY(bool interfacePopoutFileDialogNonModal READ getInterfacePopoutFileDialogNonModal WRITE setInterfacePopoutFileDialogNonModal NOTIFY interfacePopoutFileDialogNonModalChanged)
    bool getInterfacePopoutFileDialogNonModal();
    void setInterfacePopoutFileDialogNonModal();
    void setDefaultForInterfacePopoutFileDialogNonModal();

    Q_PROPERTY(bool interfacePopoutFileRename READ getInterfacePopoutFileRename WRITE setInterfacePopoutFileRename NOTIFY interfacePopoutFileRenameChanged)
    bool getInterfacePopoutFileRename();
    void setInterfacePopoutFileRename();
    void setDefaultForInterfacePopoutFileRename();

    Q_PROPERTY(bool interfacePopoutFilter READ getInterfacePopoutFilter WRITE setInterfacePopoutFilter NOTIFY interfacePopoutFilterChanged)
    bool getInterfacePopoutFilter();
    void setInterfacePopoutFilter();
    void setDefaultForInterfacePopoutFilter();

    Q_PROPERTY(bool interfacePopoutImgur READ getInterfacePopoutImgur WRITE setInterfacePopoutImgur NOTIFY interfacePopoutImgurChanged)
    bool getInterfacePopoutImgur();
    void setInterfacePopoutImgur();
    void setDefaultForInterfacePopoutImgur();

    Q_PROPERTY(bool interfacePopoutMainMenu READ getInterfacePopoutMainMenu WRITE setInterfacePopoutMainMenu NOTIFY interfacePopoutMainMenuChanged)
    bool getInterfacePopoutMainMenu();
    void setInterfacePopoutMainMenu();
    void setDefaultForInterfacePopoutMainMenu();

    Q_PROPERTY(bool interfacePopoutMapExplorer READ getInterfacePopoutMapExplorer WRITE setInterfacePopoutMapExplorer NOTIFY interfacePopoutMapExplorerChanged)
    bool getInterfacePopoutMapExplorer();
    void setInterfacePopoutMapExplorer();
    void setDefaultForInterfacePopoutMapExplorer();

    Q_PROPERTY(bool interfacePopoutMapExplorerNonModal READ getInterfacePopoutMapExplorerNonModal WRITE setInterfacePopoutMapExplorerNonModal NOTIFY interfacePopoutMapExplorerNonModalChanged)
    bool getInterfacePopoutMapExplorerNonModal();
    void setInterfacePopoutMapExplorerNonModal();
    void setDefaultForInterfacePopoutMapExplorerNonModal();

    Q_PROPERTY(bool interfacePopoutMetadata READ getInterfacePopoutMetadata WRITE setInterfacePopoutMetadata NOTIFY interfacePopoutMetadataChanged)
    bool getInterfacePopoutMetadata();
    void setInterfacePopoutMetadata();
    void setDefaultForInterfacePopoutMetadata();

    Q_PROPERTY(bool interfacePopoutSettingsManager READ getInterfacePopoutSettingsManager WRITE setInterfacePopoutSettingsManager NOTIFY interfacePopoutSettingsManagerChanged)
    bool getInterfacePopoutSettingsManager();
    void setInterfacePopoutSettingsManager();
    void setDefaultForInterfacePopoutSettingsManager();

    Q_PROPERTY(bool interfacePopoutSettingsManagerNonModal READ getInterfacePopoutSettingsManagerNonModal WRITE setInterfacePopoutSettingsManagerNonModal NOTIFY interfacePopoutSettingsManagerNonModalChanged)
    bool getInterfacePopoutSettingsManagerNonModal();
    void setInterfacePopoutSettingsManagerNonModal();
    void setDefaultForInterfacePopoutSettingsManagerNonModal();

    Q_PROPERTY(bool interfacePopoutSlideshowControls READ getInterfacePopoutSlideshowControls WRITE setInterfacePopoutSlideshowControls NOTIFY interfacePopoutSlideshowControlsChanged)
    bool getInterfacePopoutSlideshowControls();
    void setInterfacePopoutSlideshowControls();
    void setDefaultForInterfacePopoutSlideshowControls();

    Q_PROPERTY(bool interfacePopoutSlideshowSetup READ getInterfacePopoutSlideshowSetup WRITE setInterfacePopoutSlideshowSetup NOTIFY interfacePopoutSlideshowSetupChanged)
    bool getInterfacePopoutSlideshowSetup();
    void setInterfacePopoutSlideshowSetup();
    void setDefaultForInterfacePopoutSlideshowSetup();

    Q_PROPERTY(bool interfacePopoutWhenWindowIsSmall READ getInterfacePopoutWhenWindowIsSmall WRITE setInterfacePopoutWhenWindowIsSmall NOTIFY interfacePopoutWhenWindowIsSmallChanged)
    bool getInterfacePopoutWhenWindowIsSmall();
    void setInterfacePopoutWhenWindowIsSmall();
    void setDefaultForInterfacePopoutWhenWindowIsSmall();

    Q_PROPERTY(bool interfaceQuickActions READ getInterfaceQuickActions WRITE setInterfaceQuickActions NOTIFY interfaceQuickActionsChanged)
    bool getInterfaceQuickActions();
    void setInterfaceQuickActions();
    void setDefaultForInterfaceQuickActions();

    Q_PROPERTY(int interfaceQuickActionsHeight READ getInterfaceQuickActionsHeight WRITE setInterfaceQuickActionsHeight NOTIFY interfaceQuickActionsHeightChanged)
    int getInterfaceQuickActionsHeight();
    void setInterfaceQuickActionsHeight();
    void setDefaultForInterfaceQuickActionsHeight();

    Q_PROPERTY(QStringList interfaceQuickActionsItems READ getInterfaceQuickActionsItems WRITE setInterfaceQuickActionsItems NOTIFY interfaceQuickActionsItemsChanged)
    QStringList getInterfaceQuickActionsItems();
    void setInterfaceQuickActionsItems();
    void setDefaultForInterfaceQuickActionsItems();

    Q_PROPERTY(bool interfaceRememberLastImage READ getInterfaceRememberLastImage WRITE setInterfaceRememberLastImage NOTIFY interfaceRememberLastImageChanged)
    bool getInterfaceRememberLastImage();
    void setInterfaceRememberLastImage();
    void setDefaultForInterfaceRememberLastImage();

    Q_PROPERTY(bool interfaceSaveWindowGeometry READ getInterfaceSaveWindowGeometry WRITE setInterfaceSaveWindowGeometry NOTIFY interfaceSaveWindowGeometryChanged)
    bool getInterfaceSaveWindowGeometry();
    void setInterfaceSaveWindowGeometry();
    void setDefaultForInterfaceSaveWindowGeometry();

    Q_PROPERTY(bool interfaceStatusInfoAutoHide READ getInterfaceStatusInfoAutoHide WRITE setInterfaceStatusInfoAutoHide NOTIFY interfaceStatusInfoAutoHideChanged)
    bool getInterfaceStatusInfoAutoHide();
    void setInterfaceStatusInfoAutoHide();
    void setDefaultForInterfaceStatusInfoAutoHide();

    Q_PROPERTY(int interfaceStatusInfoAutoHideTimeout READ getInterfaceStatusInfoAutoHideTimeout WRITE setInterfaceStatusInfoAutoHideTimeout NOTIFY interfaceStatusInfoAutoHideTimeoutChanged)
    int getInterfaceStatusInfoAutoHideTimeout();
    void setInterfaceStatusInfoAutoHideTimeout();
    void setDefaultForInterfaceStatusInfoAutoHideTimeout();

    Q_PROPERTY(bool interfaceStatusInfoAutoHideTopEdge READ getInterfaceStatusInfoAutoHideTopEdge WRITE setInterfaceStatusInfoAutoHideTopEdge NOTIFY interfaceStatusInfoAutoHideTopEdgeChanged)
    bool getInterfaceStatusInfoAutoHideTopEdge();
    void setInterfaceStatusInfoAutoHideTopEdge();
    void setDefaultForInterfaceStatusInfoAutoHideTopEdge();

    Q_PROPERTY(int interfaceStatusInfoFontSize READ getInterfaceStatusInfoFontSize WRITE setInterfaceStatusInfoFontSize NOTIFY interfaceStatusInfoFontSizeChanged)
    int getInterfaceStatusInfoFontSize();
    void setInterfaceStatusInfoFontSize();
    void setDefaultForInterfaceStatusInfoFontSize();

    Q_PROPERTY(QStringList interfaceStatusInfoList READ getInterfaceStatusInfoList WRITE setInterfaceStatusInfoList NOTIFY interfaceStatusInfoListChanged)
    QStringList getInterfaceStatusInfoList();
    void setInterfaceStatusInfoList();
    void setDefaultForInterfaceStatusInfoList();

    Q_PROPERTY(bool interfaceStatusInfoManageWindow READ getInterfaceStatusInfoManageWindow WRITE setInterfaceStatusInfoManageWindow NOTIFY interfaceStatusInfoManageWindowChanged)
    bool getInterfaceStatusInfoManageWindow();
    void setInterfaceStatusInfoManageWindow();
    void setDefaultForInterfaceStatusInfoManageWindow();

    Q_PROPERTY(QString interfaceStatusInfoPosition READ getInterfaceStatusInfoPosition WRITE setInterfaceStatusInfoPosition NOTIFY interfaceStatusInfoPositionChanged)
    QString getInterfaceStatusInfoPosition();
    void setInterfaceStatusInfoPosition();
    void setDefaultForInterfaceStatusInfoPosition();

    Q_PROPERTY(bool interfaceStatusInfoShow READ getInterfaceStatusInfoShow WRITE setInterfaceStatusInfoShow NOTIFY interfaceStatusInfoShowChanged)
    bool getInterfaceStatusInfoShow();
    void setInterfaceStatusInfoShow();
    void setDefaultForInterfaceStatusInfoShow();

    Q_PROPERTY(bool interfaceStatusInfoShowImageChange READ getInterfaceStatusInfoShowImageChange WRITE setInterfaceStatusInfoShowImageChange NOTIFY interfaceStatusInfoShowImageChangeChanged)
    bool getInterfaceStatusInfoShowImageChange();
    void setInterfaceStatusInfoShowImageChange();
    void setDefaultForInterfaceStatusInfoShowImageChange();

    Q_PROPERTY(int interfaceTrayIcon READ getInterfaceTrayIcon WRITE setInterfaceTrayIcon NOTIFY interfaceTrayIconChanged)
    int getInterfaceTrayIcon();
    void setInterfaceTrayIcon();
    void setDefaultForInterfaceTrayIcon();

    Q_PROPERTY(bool interfaceTrayIconHideReset READ getInterfaceTrayIconHideReset WRITE setInterfaceTrayIconHideReset NOTIFY interfaceTrayIconHideResetChanged)
    bool getInterfaceTrayIconHideReset();
    void setInterfaceTrayIconHideReset();
    void setDefaultForInterfaceTrayIconHideReset();

    Q_PROPERTY(bool interfaceTrayIconMonochrome READ getInterfaceTrayIconMonochrome WRITE setInterfaceTrayIconMonochrome NOTIFY interfaceTrayIconMonochromeChanged)
    bool getInterfaceTrayIconMonochrome();
    void setInterfaceTrayIconMonochrome();
    void setDefaultForInterfaceTrayIconMonochrome();

    Q_PROPERTY(bool interfaceWindowButtonsAutoHide READ getInterfaceWindowButtonsAutoHide WRITE setInterfaceWindowButtonsAutoHide NOTIFY interfaceWindowButtonsAutoHideChanged)
    bool getInterfaceWindowButtonsAutoHide();
    void setInterfaceWindowButtonsAutoHide();
    void setDefaultForInterfaceWindowButtonsAutoHide();

    Q_PROPERTY(int interfaceWindowButtonsAutoHideTimeout READ getInterfaceWindowButtonsAutoHideTimeout WRITE setInterfaceWindowButtonsAutoHideTimeout NOTIFY interfaceWindowButtonsAutoHideTimeoutChanged)
    int getInterfaceWindowButtonsAutoHideTimeout();
    void setInterfaceWindowButtonsAutoHideTimeout();
    void setDefaultForInterfaceWindowButtonsAutoHideTimeout();

    Q_PROPERTY(bool interfaceWindowButtonsAutoHideTopEdge READ getInterfaceWindowButtonsAutoHideTopEdge WRITE setInterfaceWindowButtonsAutoHideTopEdge NOTIFY interfaceWindowButtonsAutoHideTopEdgeChanged)
    bool getInterfaceWindowButtonsAutoHideTopEdge();
    void setInterfaceWindowButtonsAutoHideTopEdge();
    void setDefaultForInterfaceWindowButtonsAutoHideTopEdge();

    Q_PROPERTY(QStringList interfaceWindowButtonsItems READ getInterfaceWindowButtonsItems WRITE setInterfaceWindowButtonsItems NOTIFY interfaceWindowButtonsItemsChanged)
    QStringList getInterfaceWindowButtonsItems();
    void setInterfaceWindowButtonsItems();
    void setDefaultForInterfaceWindowButtonsItems();

    Q_PROPERTY(bool interfaceWindowButtonsShow READ getInterfaceWindowButtonsShow WRITE setInterfaceWindowButtonsShow NOTIFY interfaceWindowButtonsShowChanged)
    bool getInterfaceWindowButtonsShow();
    void setInterfaceWindowButtonsShow();
    void setDefaultForInterfaceWindowButtonsShow();

    Q_PROPERTY(int interfaceWindowButtonsSize READ getInterfaceWindowButtonsSize WRITE setInterfaceWindowButtonsSize NOTIFY interfaceWindowButtonsSizeChanged)
    int getInterfaceWindowButtonsSize();
    void setInterfaceWindowButtonsSize();
    void setDefaultForInterfaceWindowButtonsSize();

    Q_PROPERTY(bool interfaceWindowDecoration READ getInterfaceWindowDecoration WRITE setInterfaceWindowDecoration NOTIFY interfaceWindowDecorationChanged)
    bool getInterfaceWindowDecoration();
    void setInterfaceWindowDecoration();
    void setDefaultForInterfaceWindowDecoration();

    Q_PROPERTY(bool interfaceWindowDecorationOnEmptyBackground READ getInterfaceWindowDecorationOnEmptyBackground WRITE setInterfaceWindowDecorationOnEmptyBackground NOTIFY interfaceWindowDecorationOnEmptyBackgroundChanged)
    bool getInterfaceWindowDecorationOnEmptyBackground();
    void setInterfaceWindowDecorationOnEmptyBackground();
    void setDefaultForInterfaceWindowDecorationOnEmptyBackground();

    Q_PROPERTY(bool interfaceWindowMode READ getInterfaceWindowMode WRITE setInterfaceWindowMode NOTIFY interfaceWindowModeChanged)
    bool getInterfaceWindowMode();
    void setInterfaceWindowMode();
    void setDefaultForInterfaceWindowMode();

    /**************************************/
    // table: mainmenu

    Q_PROPERTY(bool mainmenuElementHeightDynamic READ getMainmenuElementHeightDynamic WRITE setMainmenuElementHeightDynamic NOTIFY mainmenuElementHeightDynamicChanged)
    bool getMainmenuElementHeightDynamic();
    void setMainmenuElementHeightDynamic();
    void setDefaultForMainmenuElementHeightDynamic();

    Q_PROPERTY(QPoint mainmenuElementPosition READ getMainmenuElementPosition WRITE setMainmenuElementPosition NOTIFY mainmenuElementPositionChanged)
    QPoint getMainmenuElementPosition();
    void setMainmenuElementPosition();
    void setDefaultForMainmenuElementPosition();

    Q_PROPERTY(QSize mainmenuElementSize READ getMainmenuElementSize WRITE setMainmenuElementSize NOTIFY mainmenuElementSizeChanged)
    QSize getMainmenuElementSize();
    void setMainmenuElementSize();
    void setDefaultForMainmenuElementSize();

    Q_PROPERTY(int mainmenuElementWidth READ getMainmenuElementWidth WRITE setMainmenuElementWidth NOTIFY mainmenuElementWidthChanged)
    int getMainmenuElementWidth();
    void setMainmenuElementWidth();
    void setDefaultForMainmenuElementWidth();

    Q_PROPERTY(bool mainmenuShowExternal READ getMainmenuShowExternal WRITE setMainmenuShowExternal NOTIFY mainmenuShowExternalChanged)
    bool getMainmenuShowExternal();
    void setMainmenuShowExternal();
    void setDefaultForMainmenuShowExternal();

    /**************************************/
    // table: mapview

    Q_PROPERTY(QPoint mapviewCurrentPosition READ getMapviewCurrentPosition WRITE setMapviewCurrentPosition NOTIFY mapviewCurrentPositionChanged)
    QPoint getMapviewCurrentPosition();
    void setMapviewCurrentPosition();
    void setDefaultForMapviewCurrentPosition();

    Q_PROPERTY(QSize mapviewCurrentSize READ getMapviewCurrentSize WRITE setMapviewCurrentSize NOTIFY mapviewCurrentSizeChanged)
    QSize getMapviewCurrentSize();
    void setMapviewCurrentSize();
    void setDefaultForMapviewCurrentSize();

    Q_PROPERTY(bool mapviewCurrentVisible READ getMapviewCurrentVisible WRITE setMapviewCurrentVisible NOTIFY mapviewCurrentVisibleChanged)
    bool getMapviewCurrentVisible();
    void setMapviewCurrentVisible();
    void setDefaultForMapviewCurrentVisible();

    Q_PROPERTY(bool mapviewExplorerThumbnailsScaleCrop READ getMapviewExplorerThumbnailsScaleCrop WRITE setMapviewExplorerThumbnailsScaleCrop NOTIFY mapviewExplorerThumbnailsScaleCropChanged)
    bool getMapviewExplorerThumbnailsScaleCrop();
    void setMapviewExplorerThumbnailsScaleCrop();
    void setDefaultForMapviewExplorerThumbnailsScaleCrop();

    Q_PROPERTY(int mapviewExplorerThumbnailsZoomLevel READ getMapviewExplorerThumbnailsZoomLevel WRITE setMapviewExplorerThumbnailsZoomLevel NOTIFY mapviewExplorerThumbnailsZoomLevelChanged)
    int getMapviewExplorerThumbnailsZoomLevel();
    void setMapviewExplorerThumbnailsZoomLevel();
    void setDefaultForMapviewExplorerThumbnailsZoomLevel();

    /**************************************/
    // table: metadata

    Q_PROPERTY(bool metadataAutoRotation READ getMetadataAutoRotation WRITE setMetadataAutoRotation NOTIFY metadataAutoRotationChanged)
    bool getMetadataAutoRotation();
    void setMetadataAutoRotation();
    void setDefaultForMetadataAutoRotation();

    Q_PROPERTY(bool metadataCopyright READ getMetadataCopyright WRITE setMetadataCopyright NOTIFY metadataCopyrightChanged)
    bool getMetadataCopyright();
    void setMetadataCopyright();
    void setDefaultForMetadataCopyright();

    Q_PROPERTY(bool metadataDimensions READ getMetadataDimensions WRITE setMetadataDimensions NOTIFY metadataDimensionsChanged)
    bool getMetadataDimensions();
    void setMetadataDimensions();
    void setDefaultForMetadataDimensions();

    Q_PROPERTY(bool metadataElementFloating READ getMetadataElementFloating WRITE setMetadataElementFloating NOTIFY metadataElementFloatingChanged)
    bool getMetadataElementFloating();
    void setMetadataElementFloating();
    void setDefaultForMetadataElementFloating();

    Q_PROPERTY(bool metadataElementHeightDynamic READ getMetadataElementHeightDynamic WRITE setMetadataElementHeightDynamic NOTIFY metadataElementHeightDynamicChanged)
    bool getMetadataElementHeightDynamic();
    void setMetadataElementHeightDynamic();
    void setDefaultForMetadataElementHeightDynamic();

    Q_PROPERTY(QPoint metadataElementPosition READ getMetadataElementPosition WRITE setMetadataElementPosition NOTIFY metadataElementPositionChanged)
    QPoint getMetadataElementPosition();
    void setMetadataElementPosition();
    void setDefaultForMetadataElementPosition();

    Q_PROPERTY(QSize metadataElementSize READ getMetadataElementSize WRITE setMetadataElementSize NOTIFY metadataElementSizeChanged)
    QSize getMetadataElementSize();
    void setMetadataElementSize();
    void setDefaultForMetadataElementSize();

    Q_PROPERTY(bool metadataElementVisible READ getMetadataElementVisible WRITE setMetadataElementVisible NOTIFY metadataElementVisibleChanged)
    bool getMetadataElementVisible();
    void setMetadataElementVisible();
    void setDefaultForMetadataElementVisible();

    Q_PROPERTY(bool metadataExposureTime READ getMetadataExposureTime WRITE setMetadataExposureTime NOTIFY metadataExposureTimeChanged)
    bool getMetadataExposureTime();
    void setMetadataExposureTime();
    void setDefaultForMetadataExposureTime();

    Q_PROPERTY(bool metadataFLength READ getMetadataFLength WRITE setMetadataFLength NOTIFY metadataFLengthChanged)
    bool getMetadataFLength();
    void setMetadataFLength();
    void setDefaultForMetadataFLength();

    Q_PROPERTY(bool metadataFNumber READ getMetadataFNumber WRITE setMetadataFNumber NOTIFY metadataFNumberChanged)
    bool getMetadataFNumber();
    void setMetadataFNumber();
    void setDefaultForMetadataFNumber();

    Q_PROPERTY(bool metadataFaceTagsBorder READ getMetadataFaceTagsBorder WRITE setMetadataFaceTagsBorder NOTIFY metadataFaceTagsBorderChanged)
    bool getMetadataFaceTagsBorder();
    void setMetadataFaceTagsBorder();
    void setDefaultForMetadataFaceTagsBorder();

    Q_PROPERTY(QString metadataFaceTagsBorderColor READ getMetadataFaceTagsBorderColor WRITE setMetadataFaceTagsBorderColor NOTIFY metadataFaceTagsBorderColorChanged)
    QString getMetadataFaceTagsBorderColor();
    void setMetadataFaceTagsBorderColor();
    void setDefaultForMetadataFaceTagsBorderColor();

    Q_PROPERTY(int metadataFaceTagsBorderWidth READ getMetadataFaceTagsBorderWidth WRITE setMetadataFaceTagsBorderWidth NOTIFY metadataFaceTagsBorderWidthChanged)
    int getMetadataFaceTagsBorderWidth();
    void setMetadataFaceTagsBorderWidth();
    void setDefaultForMetadataFaceTagsBorderWidth();

    Q_PROPERTY(bool metadataFaceTagsEnabled READ getMetadataFaceTagsEnabled WRITE setMetadataFaceTagsEnabled NOTIFY metadataFaceTagsEnabledChanged)
    bool getMetadataFaceTagsEnabled();
    void setMetadataFaceTagsEnabled();
    void setDefaultForMetadataFaceTagsEnabled();

    Q_PROPERTY(int metadataFaceTagsFontSize READ getMetadataFaceTagsFontSize WRITE setMetadataFaceTagsFontSize NOTIFY metadataFaceTagsFontSizeChanged)
    int getMetadataFaceTagsFontSize();
    void setMetadataFaceTagsFontSize();
    void setDefaultForMetadataFaceTagsFontSize();

    Q_PROPERTY(int metadataFaceTagsVisibility READ getMetadataFaceTagsVisibility WRITE setMetadataFaceTagsVisibility NOTIFY metadataFaceTagsVisibilityChanged)
    int getMetadataFaceTagsVisibility();
    void setMetadataFaceTagsVisibility();
    void setDefaultForMetadataFaceTagsVisibility();

    Q_PROPERTY(bool metadataFileSize READ getMetadataFileSize WRITE setMetadataFileSize NOTIFY metadataFileSizeChanged)
    bool getMetadataFileSize();
    void setMetadataFileSize();
    void setDefaultForMetadataFileSize();

    Q_PROPERTY(bool metadataFileType READ getMetadataFileType WRITE setMetadataFileType NOTIFY metadataFileTypeChanged)
    bool getMetadataFileType();
    void setMetadataFileType();
    void setDefaultForMetadataFileType();

    Q_PROPERTY(bool metadataFilename READ getMetadataFilename WRITE setMetadataFilename NOTIFY metadataFilenameChanged)
    bool getMetadataFilename();
    void setMetadataFilename();
    void setDefaultForMetadataFilename();

    Q_PROPERTY(bool metadataFlash READ getMetadataFlash WRITE setMetadataFlash NOTIFY metadataFlashChanged)
    bool getMetadataFlash();
    void setMetadataFlash();
    void setDefaultForMetadataFlash();

    Q_PROPERTY(bool metadataGps READ getMetadataGps WRITE setMetadataGps NOTIFY metadataGpsChanged)
    bool getMetadataGps();
    void setMetadataGps();
    void setDefaultForMetadataGps();

    Q_PROPERTY(QString metadataGpsMap READ getMetadataGpsMap WRITE setMetadataGpsMap NOTIFY metadataGpsMapChanged)
    QString getMetadataGpsMap();
    void setMetadataGpsMap();
    void setDefaultForMetadataGpsMap();

    Q_PROPERTY(bool metadataImageNumber READ getMetadataImageNumber WRITE setMetadataImageNumber NOTIFY metadataImageNumberChanged)
    bool getMetadataImageNumber();
    void setMetadataImageNumber();
    void setDefaultForMetadataImageNumber();

    Q_PROPERTY(bool metadataIso READ getMetadataIso WRITE setMetadataIso NOTIFY metadataIsoChanged)
    bool getMetadataIso();
    void setMetadataIso();
    void setDefaultForMetadataIso();

    Q_PROPERTY(bool metadataKeywords READ getMetadataKeywords WRITE setMetadataKeywords NOTIFY metadataKeywordsChanged)
    bool getMetadataKeywords();
    void setMetadataKeywords();
    void setDefaultForMetadataKeywords();

    Q_PROPERTY(bool metadataLightSource READ getMetadataLightSource WRITE setMetadataLightSource NOTIFY metadataLightSourceChanged)
    bool getMetadataLightSource();
    void setMetadataLightSource();
    void setDefaultForMetadataLightSource();

    Q_PROPERTY(bool metadataLocation READ getMetadataLocation WRITE setMetadataLocation NOTIFY metadataLocationChanged)
    bool getMetadataLocation();
    void setMetadataLocation();
    void setDefaultForMetadataLocation();

    Q_PROPERTY(bool metadataMake READ getMetadataMake WRITE setMetadataMake NOTIFY metadataMakeChanged)
    bool getMetadataMake();
    void setMetadataMake();
    void setDefaultForMetadataMake();

    Q_PROPERTY(bool metadataModel READ getMetadataModel WRITE setMetadataModel NOTIFY metadataModelChanged)
    bool getMetadataModel();
    void setMetadataModel();
    void setDefaultForMetadataModel();

    Q_PROPERTY(bool metadataSceneType READ getMetadataSceneType WRITE setMetadataSceneType NOTIFY metadataSceneTypeChanged)
    bool getMetadataSceneType();
    void setMetadataSceneType();
    void setDefaultForMetadataSceneType();

    Q_PROPERTY(bool metadataSoftware READ getMetadataSoftware WRITE setMetadataSoftware NOTIFY metadataSoftwareChanged)
    bool getMetadataSoftware();
    void setMetadataSoftware();
    void setDefaultForMetadataSoftware();

    Q_PROPERTY(bool metadataTime READ getMetadataTime WRITE setMetadataTime NOTIFY metadataTimeChanged)
    bool getMetadataTime();
    void setMetadataTime();
    void setDefaultForMetadataTime();

    /**************************************/
    // table: slideshow

    Q_PROPERTY(bool slideshowHideLabels READ getSlideshowHideLabels WRITE setSlideshowHideLabels NOTIFY slideshowHideLabelsChanged)
    bool getSlideshowHideLabels();
    void setSlideshowHideLabels();
    void setDefaultForSlideshowHideLabels();

    Q_PROPERTY(bool slideshowHideWindowButtons READ getSlideshowHideWindowButtons WRITE setSlideshowHideWindowButtons NOTIFY slideshowHideWindowButtonsChanged)
    bool getSlideshowHideWindowButtons();
    void setSlideshowHideWindowButtons();
    void setDefaultForSlideshowHideWindowButtons();

    Q_PROPERTY(int slideshowImageTransition READ getSlideshowImageTransition WRITE setSlideshowImageTransition NOTIFY slideshowImageTransitionChanged)
    int getSlideshowImageTransition();
    void setSlideshowImageTransition();
    void setDefaultForSlideshowImageTransition();

    Q_PROPERTY(bool slideshowIncludeSubFolders READ getSlideshowIncludeSubFolders WRITE setSlideshowIncludeSubFolders NOTIFY slideshowIncludeSubFoldersChanged)
    bool getSlideshowIncludeSubFolders();
    void setSlideshowIncludeSubFolders();
    void setDefaultForSlideshowIncludeSubFolders();

    Q_PROPERTY(bool slideshowLoop READ getSlideshowLoop WRITE setSlideshowLoop NOTIFY slideshowLoopChanged)
    bool getSlideshowLoop();
    void setSlideshowLoop();
    void setDefaultForSlideshowLoop();

    Q_PROPERTY(bool slideshowMusic READ getSlideshowMusic WRITE setSlideshowMusic NOTIFY slideshowMusicChanged)
    bool getSlideshowMusic();
    void setSlideshowMusic();
    void setDefaultForSlideshowMusic();

    Q_PROPERTY(QString slideshowMusicFile READ getSlideshowMusicFile WRITE setSlideshowMusicFile NOTIFY slideshowMusicFileChanged)
    QString getSlideshowMusicFile();
    void setSlideshowMusicFile();
    void setDefaultForSlideshowMusicFile();

    Q_PROPERTY(QStringList slideshowMusicFiles READ getSlideshowMusicFiles WRITE setSlideshowMusicFiles NOTIFY slideshowMusicFilesChanged)
    QStringList getSlideshowMusicFiles();
    void setSlideshowMusicFiles();
    void setDefaultForSlideshowMusicFiles();

    Q_PROPERTY(bool slideshowMusicShuffle READ getSlideshowMusicShuffle WRITE setSlideshowMusicShuffle NOTIFY slideshowMusicShuffleChanged)
    bool getSlideshowMusicShuffle();
    void setSlideshowMusicShuffle();
    void setDefaultForSlideshowMusicShuffle();

    Q_PROPERTY(int slideshowMusicVolumeVideos READ getSlideshowMusicVolumeVideos WRITE setSlideshowMusicVolumeVideos NOTIFY slideshowMusicVolumeVideosChanged)
    int getSlideshowMusicVolumeVideos();
    void setSlideshowMusicVolumeVideos();
    void setDefaultForSlideshowMusicVolumeVideos();

    Q_PROPERTY(bool slideshowShuffle READ getSlideshowShuffle WRITE setSlideshowShuffle NOTIFY slideshowShuffleChanged)
    bool getSlideshowShuffle();
    void setSlideshowShuffle();
    void setDefaultForSlideshowShuffle();

    Q_PROPERTY(int slideshowTime READ getSlideshowTime WRITE setSlideshowTime NOTIFY slideshowTimeChanged)
    int getSlideshowTime();
    void setSlideshowTime();
    void setDefaultForSlideshowTime();

    Q_PROPERTY(QString slideshowTypeAnimation READ getSlideshowTypeAnimation WRITE setSlideshowTypeAnimation NOTIFY slideshowTypeAnimationChanged)
    QString getSlideshowTypeAnimation();
    void setSlideshowTypeAnimation();
    void setDefaultForSlideshowTypeAnimation();

    /**************************************/
    // table: thumbnails

    Q_PROPERTY(bool thumbnailsCache READ getThumbnailsCache WRITE setThumbnailsCache NOTIFY thumbnailsCacheChanged)
    bool getThumbnailsCache();
    void setThumbnailsCache();
    void setDefaultForThumbnailsCache();

    Q_PROPERTY(bool thumbnailsCacheBaseDirDefault READ getThumbnailsCacheBaseDirDefault WRITE setThumbnailsCacheBaseDirDefault NOTIFY thumbnailsCacheBaseDirDefaultChanged)
    bool getThumbnailsCacheBaseDirDefault();
    void setThumbnailsCacheBaseDirDefault();
    void setDefaultForThumbnailsCacheBaseDirDefault();

    Q_PROPERTY(QString thumbnailsCacheBaseDirLocation READ getThumbnailsCacheBaseDirLocation WRITE setThumbnailsCacheBaseDirLocation NOTIFY thumbnailsCacheBaseDirLocationChanged)
    QString getThumbnailsCacheBaseDirLocation();
    void setThumbnailsCacheBaseDirLocation();
    void setDefaultForThumbnailsCacheBaseDirLocation();

    Q_PROPERTY(bool thumbnailsCenterOnActive READ getThumbnailsCenterOnActive WRITE setThumbnailsCenterOnActive NOTIFY thumbnailsCenterOnActiveChanged)
    bool getThumbnailsCenterOnActive();
    void setThumbnailsCenterOnActive();
    void setDefaultForThumbnailsCenterOnActive();

    Q_PROPERTY(bool thumbnailsCropToFit READ getThumbnailsCropToFit WRITE setThumbnailsCropToFit NOTIFY thumbnailsCropToFitChanged)
    bool getThumbnailsCropToFit();
    void setThumbnailsCropToFit();
    void setDefaultForThumbnailsCropToFit();

    Q_PROPERTY(bool thumbnailsDisable READ getThumbnailsDisable WRITE setThumbnailsDisable NOTIFY thumbnailsDisableChanged)
    bool getThumbnailsDisable();
    void setThumbnailsDisable();
    void setDefaultForThumbnailsDisable();

    Q_PROPERTY(QString thumbnailsExcludeDropBox READ getThumbnailsExcludeDropBox WRITE setThumbnailsExcludeDropBox NOTIFY thumbnailsExcludeDropBoxChanged)
    QString getThumbnailsExcludeDropBox();
    void setThumbnailsExcludeDropBox();
    void setDefaultForThumbnailsExcludeDropBox();

    Q_PROPERTY(QStringList thumbnailsExcludeFolders READ getThumbnailsExcludeFolders WRITE setThumbnailsExcludeFolders NOTIFY thumbnailsExcludeFoldersChanged)
    QStringList getThumbnailsExcludeFolders();
    void setThumbnailsExcludeFolders();
    void setDefaultForThumbnailsExcludeFolders();

    Q_PROPERTY(bool thumbnailsExcludeNetworkShares READ getThumbnailsExcludeNetworkShares WRITE setThumbnailsExcludeNetworkShares NOTIFY thumbnailsExcludeNetworkSharesChanged)
    bool getThumbnailsExcludeNetworkShares();
    void setThumbnailsExcludeNetworkShares();
    void setDefaultForThumbnailsExcludeNetworkShares();

    Q_PROPERTY(QString thumbnailsExcludeNextcloud READ getThumbnailsExcludeNextcloud WRITE setThumbnailsExcludeNextcloud NOTIFY thumbnailsExcludeNextcloudChanged)
    QString getThumbnailsExcludeNextcloud();
    void setThumbnailsExcludeNextcloud();
    void setDefaultForThumbnailsExcludeNextcloud();

    Q_PROPERTY(QString thumbnailsExcludeOwnCloud READ getThumbnailsExcludeOwnCloud WRITE setThumbnailsExcludeOwnCloud NOTIFY thumbnailsExcludeOwnCloudChanged)
    QString getThumbnailsExcludeOwnCloud();
    void setThumbnailsExcludeOwnCloud();
    void setDefaultForThumbnailsExcludeOwnCloud();

    Q_PROPERTY(bool thumbnailsFilename READ getThumbnailsFilename WRITE setThumbnailsFilename NOTIFY thumbnailsFilenameChanged)
    bool getThumbnailsFilename();
    void setThumbnailsFilename();
    void setDefaultForThumbnailsFilename();

    Q_PROPERTY(int thumbnailsFontSize READ getThumbnailsFontSize WRITE setThumbnailsFontSize NOTIFY thumbnailsFontSizeChanged)
    int getThumbnailsFontSize();
    void setThumbnailsFontSize();
    void setDefaultForThumbnailsFontSize();

    Q_PROPERTY(QStringList thumbnailsHighlightAnimation READ getThumbnailsHighlightAnimation WRITE setThumbnailsHighlightAnimation NOTIFY thumbnailsHighlightAnimationChanged)
    QStringList getThumbnailsHighlightAnimation();
    void setThumbnailsHighlightAnimation();
    void setDefaultForThumbnailsHighlightAnimation();

    Q_PROPERTY(int thumbnailsHighlightAnimationLiftUp READ getThumbnailsHighlightAnimationLiftUp WRITE setThumbnailsHighlightAnimationLiftUp NOTIFY thumbnailsHighlightAnimationLiftUpChanged)
    int getThumbnailsHighlightAnimationLiftUp();
    void setThumbnailsHighlightAnimationLiftUp();
    void setDefaultForThumbnailsHighlightAnimationLiftUp();

    Q_PROPERTY(bool thumbnailsIconsOnly READ getThumbnailsIconsOnly WRITE setThumbnailsIconsOnly NOTIFY thumbnailsIconsOnlyChanged)
    bool getThumbnailsIconsOnly();
    void setThumbnailsIconsOnly();
    void setDefaultForThumbnailsIconsOnly();

    Q_PROPERTY(bool thumbnailsInactiveTransparent READ getThumbnailsInactiveTransparent WRITE setThumbnailsInactiveTransparent NOTIFY thumbnailsInactiveTransparentChanged)
    bool getThumbnailsInactiveTransparent();
    void setThumbnailsInactiveTransparent();
    void setDefaultForThumbnailsInactiveTransparent();

    Q_PROPERTY(int thumbnailsMaxNumberThreads READ getThumbnailsMaxNumberThreads WRITE setThumbnailsMaxNumberThreads NOTIFY thumbnailsMaxNumberThreadsChanged)
    int getThumbnailsMaxNumberThreads();
    void setThumbnailsMaxNumberThreads();
    void setDefaultForThumbnailsMaxNumberThreads();

    Q_PROPERTY(bool thumbnailsSameHeightVaryWidth READ getThumbnailsSameHeightVaryWidth WRITE setThumbnailsSameHeightVaryWidth NOTIFY thumbnailsSameHeightVaryWidthChanged)
    bool getThumbnailsSameHeightVaryWidth();
    void setThumbnailsSameHeightVaryWidth();
    void setDefaultForThumbnailsSameHeightVaryWidth();

    Q_PROPERTY(int thumbnailsSize READ getThumbnailsSize WRITE setThumbnailsSize NOTIFY thumbnailsSizeChanged)
    int getThumbnailsSize();
    void setThumbnailsSize();
    void setDefaultForThumbnailsSize();

    Q_PROPERTY(bool thumbnailsSmallThumbnailsKeepSmall READ getThumbnailsSmallThumbnailsKeepSmall WRITE setThumbnailsSmallThumbnailsKeepSmall NOTIFY thumbnailsSmallThumbnailsKeepSmallChanged)
    bool getThumbnailsSmallThumbnailsKeepSmall();
    void setThumbnailsSmallThumbnailsKeepSmall();
    void setDefaultForThumbnailsSmallThumbnailsKeepSmall();

    Q_PROPERTY(int thumbnailsSpacing READ getThumbnailsSpacing WRITE setThumbnailsSpacing NOTIFY thumbnailsSpacingChanged)
    int getThumbnailsSpacing();
    void setThumbnailsSpacing();
    void setDefaultForThumbnailsSpacing();

    Q_PROPERTY(bool thumbnailsTooltip READ getThumbnailsTooltip WRITE setThumbnailsTooltip NOTIFY thumbnailsTooltipChanged)
    bool getThumbnailsTooltip();
    void setThumbnailsTooltip();
    void setDefaultForThumbnailsTooltip();

    Q_PROPERTY(int thumbnailsVisibility READ getThumbnailsVisibility WRITE setThumbnailsVisibility NOTIFY thumbnailsVisibilityChanged)
    int getThumbnailsVisibility();
    void setThumbnailsVisibility();
    void setDefaultForThumbnailsVisibility();


    void setDefault();
    void setDefaultFor(QString key);

    void readDB();

    bool backupDatabase();

    void closeDatabase();
    void reopenDatabase();

    QString verifyNameAndGetType(QString name);

    int migrate(QString oldversion = "");
    void setupFresh();

public Q_SLOTS:
    void resetToDefault();

private:

    // table: filedialog
        bool m_filedialogDetailsTooltip;
        bool m_filedialogDevices;
        bool m_filedialogDevicesShowTmpfs;
        bool m_filedialogDragDropFileviewGrid;
        bool m_filedialogDragDropFileviewList;
        bool m_filedialogDragDropFileviewMasonry;
        bool m_filedialogDragDropPlaces;
        int m_filedialogElementPadding;
        bool m_filedialogFolderContentThumbnails;
        bool m_filedialogFolderContentThumbnailsAutoload;
        bool m_filedialogFolderContentThumbnailsLoop;
        bool m_filedialogFolderContentThumbnailsScaleCrop;
        int m_filedialogFolderContentThumbnailsSpeed;
        bool m_filedialogKeepLastLocation;
        bool m_filedialogLabelsShowGrid;
        bool m_filedialogLabelsShowMasonry;
        QString m_filedialogLayout;
        bool m_filedialogPlaces;
        int m_filedialogPlacesWidth;
        bool m_filedialogPreview;
        bool m_filedialogPreviewBlur;
        int m_filedialogPreviewColorIntensity;
        bool m_filedialogPreviewCropToFit;
        bool m_filedialogPreviewHigherResolution;
        bool m_filedialogPreviewMuted;
        bool m_filedialogRememberSelection;
        bool m_filedialogShowHiddenFilesFolders;
        bool m_filedialogSingleClickSelect;
        bool m_filedialogThumbnails;
        bool m_filedialogThumbnailsScaleCrop;
        int m_filedialogZoom;

    // table: filetypes
        bool m_filetypesAnimatedControls;
        bool m_filetypesAnimatedLeftRight;
        bool m_filetypesAnimatedSpacePause;
        bool m_filetypesArchiveControls;
        bool m_filetypesArchiveLeftRight;
        bool m_filetypesDocumentControls;
        bool m_filetypesDocumentLeftRight;
        bool m_filetypesExternalUnrar;
        bool m_filetypesLoadAppleLivePhotos;
        bool m_filetypesLoadMotionPhotos;
        bool m_filetypesMotionAutoPlay;
        bool m_filetypesMotionPhotoPlayPause;
        bool m_filetypesMotionSpacePause;
        int m_filetypesPDFQuality;
        bool m_filetypesPhotoSphereArrowKeys;
        bool m_filetypesPhotoSphereAutoLoad;
        bool m_filetypesPhotoSphereBigButton;
        bool m_filetypesPhotoSphereControls;
        bool m_filetypesPhotoSpherePanOnLoad;
        bool m_filetypesRAWUseEmbeddedIfAvailable;
        bool m_filetypesVideoAutoplay;
        bool m_filetypesVideoLeftRightJumpVideo;
        bool m_filetypesVideoLoop;
        bool m_filetypesVideoPreferLibmpv;
        bool m_filetypesVideoSpacePause;
        QString m_filetypesVideoThumbnailer;
        int m_filetypesVideoVolume;

    // table: general
        bool m_generalAutoSaveSettings;
        bool m_generalCompactSettings;
        QString m_generalVersion;

    // table: imageview
        bool m_imageviewAdvancedSortAscending;
        QString m_imageviewAdvancedSortCriteria;
        QStringList m_imageviewAdvancedSortDateCriteria;
        QString m_imageviewAdvancedSortQuality;
        bool m_imageviewAlwaysActualSize;
        int m_imageviewAnimationDuration;
        QString m_imageviewAnimationType;
        int m_imageviewCache;
        QStringList m_imageviewColorSpaceContextMenu;
        QString m_imageviewColorSpaceDefault;
        bool m_imageviewColorSpaceEnable;
        bool m_imageviewColorSpaceLoadEmbedded;
        bool m_imageviewEscapeExitArchive;
        bool m_imageviewEscapeExitBarcodes;
        bool m_imageviewEscapeExitDocument;
        bool m_imageviewEscapeExitFilter;
        bool m_imageviewEscapeExitSphere;
        bool m_imageviewFitInWindow;
        int m_imageviewHideCursorTimeout;
        bool m_imageviewInterpolationDisableForSmallImages;
        int m_imageviewInterpolationThreshold;
        bool m_imageviewLoopThroughFolder;
        int m_imageviewMargin;
        int m_imageviewMinimapSizeLevel;
        bool m_imageviewMirrorAnimate;
        int m_imageviewPreloadInBackground;
        bool m_imageviewPreserveMirror;
        bool m_imageviewPreserveRotation;
        bool m_imageviewPreserveZoom;
        bool m_imageviewRememberZoomRotationMirror;
        int m_imageviewResetViewAutoHideTimeout;
        bool m_imageviewResetViewShow;
        bool m_imageviewRespectDevicePixelRatio;
        bool m_imageviewShowMinimap;
        bool m_imageviewSortImagesAscending;
        QString m_imageviewSortImagesBy;
        bool m_imageviewTransparencyMarker;
        bool m_imageviewUseMouseLeftButtonForImageMove;
        bool m_imageviewUseMouseWheelForImageMove;
        int m_imageviewZoomMax;
        bool m_imageviewZoomMaxEnabled;
        int m_imageviewZoomMin;
        bool m_imageviewZoomMinEnabled;
        int m_imageviewZoomSpeed;
        bool m_imageviewZoomSpeedRelative;
        bool m_imageviewZoomToCenter;

    // table: interface
        QString m_interfaceAccentColor;
        bool m_interfaceAllowMultipleInstances;
        bool m_interfaceBackgroundCustomOverlay;
        QString m_interfaceBackgroundCustomOverlayColor;
        bool m_interfaceBackgroundFullyTransparent;
        bool m_interfaceBackgroundImageCenter;
        QString m_interfaceBackgroundImagePath;
        bool m_interfaceBackgroundImageScale;
        bool m_interfaceBackgroundImageScaleCrop;
        bool m_interfaceBackgroundImageScreenshot;
        bool m_interfaceBackgroundImageStretch;
        bool m_interfaceBackgroundImageTile;
        bool m_interfaceBackgroundImageUse;
        bool m_interfaceBackgroundSolid;
        bool m_interfaceBlurElementsInBackground;
        bool m_interfaceCloseOnEmptyBackground;
        int m_interfaceDoubleClickThreshold;
        QString m_interfaceEdgeBottomAction;
        QString m_interfaceEdgeLeftAction;
        QString m_interfaceEdgeRightAction;
        QString m_interfaceEdgeTopAction;
        int m_interfaceFontBoldWeight;
        int m_interfaceFontNormalWeight;
        int m_interfaceHotEdgeSize;
        bool m_interfaceKeepWindowOnTop;
        QString m_interfaceLanguage;
        bool m_interfaceMinimapPopout;
        int m_interfaceMouseWheelSensitivity;
        bool m_interfaceNavigateOnEmptyBackground;
        bool m_interfaceNavigationFloating;
        int m_interfaceNotificationDistanceFromEdge;
        QString m_interfaceNotificationLocation;
        bool m_interfaceNotificationTryNative;
        bool m_interfacePopoutAbout;
        bool m_interfacePopoutAdvancedSort;
        bool m_interfacePopoutChromecast;
        bool m_interfacePopoutExport;
        bool m_interfacePopoutFileDelete;
        bool m_interfacePopoutFileDialog;
        bool m_interfacePopoutFileDialogNonModal;
        bool m_interfacePopoutFileRename;
        bool m_interfacePopoutFilter;
        bool m_interfacePopoutImgur;
        bool m_interfacePopoutMainMenu;
        bool m_interfacePopoutMapExplorer;
        bool m_interfacePopoutMapExplorerNonModal;
        bool m_interfacePopoutMetadata;
        bool m_interfacePopoutSettingsManager;
        bool m_interfacePopoutSettingsManagerNonModal;
        bool m_interfacePopoutSlideshowControls;
        bool m_interfacePopoutSlideshowSetup;
        bool m_interfacePopoutWhenWindowIsSmall;
        bool m_interfaceQuickActions;
        int m_interfaceQuickActionsHeight;
        QStringList m_interfaceQuickActionsItems;
        bool m_interfaceRememberLastImage;
        bool m_interfaceSaveWindowGeometry;
        bool m_interfaceStatusInfoAutoHide;
        int m_interfaceStatusInfoAutoHideTimeout;
        bool m_interfaceStatusInfoAutoHideTopEdge;
        int m_interfaceStatusInfoFontSize;
        QStringList m_interfaceStatusInfoList;
        bool m_interfaceStatusInfoManageWindow;
        QString m_interfaceStatusInfoPosition;
        bool m_interfaceStatusInfoShow;
        bool m_interfaceStatusInfoShowImageChange;
        int m_interfaceTrayIcon;
        bool m_interfaceTrayIconHideReset;
        bool m_interfaceTrayIconMonochrome;
        bool m_interfaceWindowButtonsAutoHide;
        int m_interfaceWindowButtonsAutoHideTimeout;
        bool m_interfaceWindowButtonsAutoHideTopEdge;
        QStringList m_interfaceWindowButtonsItems;
        bool m_interfaceWindowButtonsShow;
        int m_interfaceWindowButtonsSize;
        bool m_interfaceWindowDecoration;
        bool m_interfaceWindowDecorationOnEmptyBackground;
        bool m_interfaceWindowMode;

    // table: mainmenu
        bool m_mainmenuElementHeightDynamic;
        QPoint m_mainmenuElementPosition;
        QSize m_mainmenuElementSize;
        int m_mainmenuElementWidth;
        bool m_mainmenuShowExternal;

    // table: mapview
        QPoint m_mapviewCurrentPosition;
        QSize m_mapviewCurrentSize;
        bool m_mapviewCurrentVisible;
        bool m_mapviewExplorerThumbnailsScaleCrop;
        int m_mapviewExplorerThumbnailsZoomLevel;

    // table: metadata
        bool m_metadataAutoRotation;
        bool m_metadataCopyright;
        bool m_metadataDimensions;
        bool m_metadataElementFloating;
        bool m_metadataElementHeightDynamic;
        QPoint m_metadataElementPosition;
        QSize m_metadataElementSize;
        bool m_metadataElementVisible;
        bool m_metadataExposureTime;
        bool m_metadataFLength;
        bool m_metadataFNumber;
        bool m_metadataFaceTagsBorder;
        QString m_metadataFaceTagsBorderColor;
        int m_metadataFaceTagsBorderWidth;
        bool m_metadataFaceTagsEnabled;
        int m_metadataFaceTagsFontSize;
        int m_metadataFaceTagsVisibility;
        bool m_metadataFileSize;
        bool m_metadataFileType;
        bool m_metadataFilename;
        bool m_metadataFlash;
        bool m_metadataGps;
        QString m_metadataGpsMap;
        bool m_metadataImageNumber;
        bool m_metadataIso;
        bool m_metadataKeywords;
        bool m_metadataLightSource;
        bool m_metadataLocation;
        bool m_metadataMake;
        bool m_metadataModel;
        bool m_metadataSceneType;
        bool m_metadataSoftware;
        bool m_metadataTime;

    // table: slideshow
        bool m_slideshowHideLabels;
        bool m_slideshowHideWindowButtons;
        int m_slideshowImageTransition;
        bool m_slideshowIncludeSubFolders;
        bool m_slideshowLoop;
        bool m_slideshowMusic;
        QString m_slideshowMusicFile;
        QStringList m_slideshowMusicFiles;
        bool m_slideshowMusicShuffle;
        int m_slideshowMusicVolumeVideos;
        bool m_slideshowShuffle;
        int m_slideshowTime;
        QString m_slideshowTypeAnimation;

    // table: thumbnails
        bool m_thumbnailsCache;
        bool m_thumbnailsCacheBaseDirDefault;
        QString m_thumbnailsCacheBaseDirLocation;
        bool m_thumbnailsCenterOnActive;
        bool m_thumbnailsCropToFit;
        bool m_thumbnailsDisable;
        QString m_thumbnailsExcludeDropBox;
        QStringList m_thumbnailsExcludeFolders;
        bool m_thumbnailsExcludeNetworkShares;
        QString m_thumbnailsExcludeNextcloud;
        QString m_thumbnailsExcludeOwnCloud;
        bool m_thumbnailsFilename;
        int m_thumbnailsFontSize;
        QStringList m_thumbnailsHighlightAnimation;
        int m_thumbnailsHighlightAnimationLiftUp;
        bool m_thumbnailsIconsOnly;
        bool m_thumbnailsInactiveTransparent;
        int m_thumbnailsMaxNumberThreads;
        bool m_thumbnailsSameHeightVaryWidth;
        int m_thumbnailsSize;
        bool m_thumbnailsSmallThumbnailsKeepSmall;
        int m_thumbnailsSpacing;
        bool m_thumbnailsTooltip;
        int m_thumbnailsVisibility;

    QStringList dbtables;
    QSqlDatabase db;
    QSqlDatabase dbDefault;
    bool dbIsTransaction;
    QTimer *dbCommitTimer;

    bool readonly;
    void saveChangedValue(const QString &key, const QVariant &value);

    void migrationHelperChangeSettingsName(QMap<QString, QList<QStringList> > mig, QString curVer);
    QVariant migrationHelperGetOldValue(QString table, QString setting);
    void migrationHelperRemoveValue(QString table, QString setting);
    void migrationHelperInsertValue(QString table, QString setting, QVariantList value);
    void migrationHelperSetNewValue(QString table, QString setting, QVariant value);

Q_SIGNALS:

    // table: filedialog
    void filedialogDetailsTooltipChanged(bool val);
    void filedialogDevicesChanged(bool val);
    void filedialogDevicesShowTmpfsChanged(bool val);
    void filedialogDragDropFileviewGridChanged(bool val);
    void filedialogDragDropFileviewListChanged(bool val);
    void filedialogDragDropFileviewMasonryChanged(bool val);
    void filedialogDragDropPlacesChanged(bool val);
    void filedialogElementPaddingChanged(int val);
    void filedialogFolderContentThumbnailsChanged(bool val);
    void filedialogFolderContentThumbnailsAutoloadChanged(bool val);
    void filedialogFolderContentThumbnailsLoopChanged(bool val);
    void filedialogFolderContentThumbnailsScaleCropChanged(bool val);
    void filedialogFolderContentThumbnailsSpeedChanged(int val);
    void filedialogKeepLastLocationChanged(bool val);
    void filedialogLabelsShowGridChanged(bool val);
    void filedialogLabelsShowMasonryChanged(bool val);
    void filedialogLayoutChanged(QString val);
    void filedialogPlacesChanged(bool val);
    void filedialogPlacesWidthChanged(int val);
    void filedialogPreviewChanged(bool val);
    void filedialogPreviewBlurChanged(bool val);
    void filedialogPreviewColorIntensityChanged(int val);
    void filedialogPreviewCropToFitChanged(bool val);
    void filedialogPreviewHigherResolutionChanged(bool val);
    void filedialogPreviewMutedChanged(bool val);
    void filedialogRememberSelectionChanged(bool val);
    void filedialogShowHiddenFilesFoldersChanged(bool val);
    void filedialogSingleClickSelectChanged(bool val);
    void filedialogThumbnailsChanged(bool val);
    void filedialogThumbnailsScaleCropChanged(bool val);
    void filedialogZoomChanged(int val);

    // table: filetypes
    void filetypesAnimatedControlsChanged(bool val);
    void filetypesAnimatedLeftRightChanged(bool val);
    void filetypesAnimatedSpacePauseChanged(bool val);
    void filetypesArchiveControlsChanged(bool val);
    void filetypesArchiveLeftRightChanged(bool val);
    void filetypesDocumentControlsChanged(bool val);
    void filetypesDocumentLeftRightChanged(bool val);
    void filetypesExternalUnrarChanged(bool val);
    void filetypesLoadAppleLivePhotosChanged(bool val);
    void filetypesLoadMotionPhotosChanged(bool val);
    void filetypesMotionAutoPlayChanged(bool val);
    void filetypesMotionPhotoPlayPauseChanged(bool val);
    void filetypesMotionSpacePauseChanged(bool val);
    void filetypesPDFQualityChanged(int val);
    void filetypesPhotoSphereArrowKeysChanged(bool val);
    void filetypesPhotoSphereAutoLoadChanged(bool val);
    void filetypesPhotoSphereBigButtonChanged(bool val);
    void filetypesPhotoSphereControlsChanged(bool val);
    void filetypesPhotoSpherePanOnLoadChanged(bool val);
    void filetypesRAWUseEmbeddedIfAvailableChanged(bool val);
    void filetypesVideoAutoplayChanged(bool val);
    void filetypesVideoLeftRightJumpVideoChanged(bool val);
    void filetypesVideoLoopChanged(bool val);
    void filetypesVideoPreferLibmpvChanged(bool val);
    void filetypesVideoSpacePauseChanged(bool val);
    void filetypesVideoThumbnailerChanged(QString val);
    void filetypesVideoVolumeChanged(int val);

    // table: general
    void generalAutoSaveSettingsChanged(bool val);
    void generalCompactSettingsChanged(bool val);
    void generalVersionChanged(QString val);

    // table: imageview
    void imageviewAdvancedSortAscendingChanged(bool val);
    void imageviewAdvancedSortCriteriaChanged(QString val);
    void imageviewAdvancedSortDateCriteriaChanged(QStringList val);
    void imageviewAdvancedSortQualityChanged(QString val);
    void imageviewAlwaysActualSizeChanged(bool val);
    void imageviewAnimationDurationChanged(int val);
    void imageviewAnimationTypeChanged(QString val);
    void imageviewCacheChanged(int val);
    void imageviewColorSpaceContextMenuChanged(QStringList val);
    void imageviewColorSpaceDefaultChanged(QString val);
    void imageviewColorSpaceEnableChanged(bool val);
    void imageviewColorSpaceLoadEmbeddedChanged(bool val);
    void imageviewEscapeExitArchiveChanged(bool val);
    void imageviewEscapeExitBarcodesChanged(bool val);
    void imageviewEscapeExitDocumentChanged(bool val);
    void imageviewEscapeExitFilterChanged(bool val);
    void imageviewEscapeExitSphereChanged(bool val);
    void imageviewFitInWindowChanged(bool val);
    void imageviewHideCursorTimeoutChanged(int val);
    void imageviewInterpolationDisableForSmallImagesChanged(bool val);
    void imageviewInterpolationThresholdChanged(int val);
    void imageviewLoopThroughFolderChanged(bool val);
    void imageviewMarginChanged(int val);
    void imageviewMinimapSizeLevelChanged(int val);
    void imageviewMirrorAnimateChanged(bool val);
    void imageviewPreloadInBackgroundChanged(int val);
    void imageviewPreserveMirrorChanged(bool val);
    void imageviewPreserveRotationChanged(bool val);
    void imageviewPreserveZoomChanged(bool val);
    void imageviewRememberZoomRotationMirrorChanged(bool val);
    void imageviewResetViewAutoHideTimeoutChanged(int val);
    void imageviewResetViewShowChanged(bool val);
    void imageviewRespectDevicePixelRatioChanged(bool val);
    void imageviewShowMinimapChanged(bool val);
    void imageviewSortImagesAscendingChanged(bool val);
    void imageviewSortImagesByChanged(QString val);
    void imageviewTransparencyMarkerChanged(bool val);
    void imageviewUseMouseLeftButtonForImageMoveChanged(bool val);
    void imageviewUseMouseWheelForImageMoveChanged(bool val);
    void imageviewZoomMaxChanged(int val);
    void imageviewZoomMaxEnabledChanged(bool val);
    void imageviewZoomMinChanged(int val);
    void imageviewZoomMinEnabledChanged(bool val);
    void imageviewZoomSpeedChanged(int val);
    void imageviewZoomSpeedRelativeChanged(bool val);
    void imageviewZoomToCenterChanged(bool val);

    // table: interface
    void interfaceAccentColorChanged(QString val);
    void interfaceAllowMultipleInstancesChanged(bool val);
    void interfaceBackgroundCustomOverlayChanged(bool val);
    void interfaceBackgroundCustomOverlayColorChanged(QString val);
    void interfaceBackgroundFullyTransparentChanged(bool val);
    void interfaceBackgroundImageCenterChanged(bool val);
    void interfaceBackgroundImagePathChanged(QString val);
    void interfaceBackgroundImageScaleChanged(bool val);
    void interfaceBackgroundImageScaleCropChanged(bool val);
    void interfaceBackgroundImageScreenshotChanged(bool val);
    void interfaceBackgroundImageStretchChanged(bool val);
    void interfaceBackgroundImageTileChanged(bool val);
    void interfaceBackgroundImageUseChanged(bool val);
    void interfaceBackgroundSolidChanged(bool val);
    void interfaceBlurElementsInBackgroundChanged(bool val);
    void interfaceCloseOnEmptyBackgroundChanged(bool val);
    void interfaceDoubleClickThresholdChanged(int val);
    void interfaceEdgeBottomActionChanged(QString val);
    void interfaceEdgeLeftActionChanged(QString val);
    void interfaceEdgeRightActionChanged(QString val);
    void interfaceEdgeTopActionChanged(QString val);
    void interfaceFontBoldWeightChanged(int val);
    void interfaceFontNormalWeightChanged(int val);
    void interfaceHotEdgeSizeChanged(int val);
    void interfaceKeepWindowOnTopChanged(bool val);
    void interfaceLanguageChanged(QString val);
    void interfaceMinimapPopoutChanged(bool val);
    void interfaceMouseWheelSensitivityChanged(int val);
    void interfaceNavigateOnEmptyBackgroundChanged(bool val);
    void interfaceNavigationFloatingChanged(bool val);
    void interfaceNotificationDistanceFromEdgeChanged(int val);
    void interfaceNotificationLocationChanged(QString val);
    void interfaceNotificationTryNativeChanged(bool val);
    void interfacePopoutAboutChanged(bool val);
    void interfacePopoutAdvancedSortChanged(bool val);
    void interfacePopoutChromecastChanged(bool val);
    void interfacePopoutExportChanged(bool val);
    void interfacePopoutFileDeleteChanged(bool val);
    void interfacePopoutFileDialogChanged(bool val);
    void interfacePopoutFileDialogNonModalChanged(bool val);
    void interfacePopoutFileRenameChanged(bool val);
    void interfacePopoutFilterChanged(bool val);
    void interfacePopoutImgurChanged(bool val);
    void interfacePopoutMainMenuChanged(bool val);
    void interfacePopoutMapExplorerChanged(bool val);
    void interfacePopoutMapExplorerNonModalChanged(bool val);
    void interfacePopoutMetadataChanged(bool val);
    void interfacePopoutSettingsManagerChanged(bool val);
    void interfacePopoutSettingsManagerNonModalChanged(bool val);
    void interfacePopoutSlideshowControlsChanged(bool val);
    void interfacePopoutSlideshowSetupChanged(bool val);
    void interfacePopoutWhenWindowIsSmallChanged(bool val);
    void interfaceQuickActionsChanged(bool val);
    void interfaceQuickActionsHeightChanged(int val);
    void interfaceQuickActionsItemsChanged(QStringList val);
    void interfaceRememberLastImageChanged(bool val);
    void interfaceSaveWindowGeometryChanged(bool val);
    void interfaceStatusInfoAutoHideChanged(bool val);
    void interfaceStatusInfoAutoHideTimeoutChanged(int val);
    void interfaceStatusInfoAutoHideTopEdgeChanged(bool val);
    void interfaceStatusInfoFontSizeChanged(int val);
    void interfaceStatusInfoListChanged(QStringList val);
    void interfaceStatusInfoManageWindowChanged(bool val);
    void interfaceStatusInfoPositionChanged(QString val);
    void interfaceStatusInfoShowChanged(bool val);
    void interfaceStatusInfoShowImageChangeChanged(bool val);
    void interfaceTrayIconChanged(int val);
    void interfaceTrayIconHideResetChanged(bool val);
    void interfaceTrayIconMonochromeChanged(bool val);
    void interfaceWindowButtonsAutoHideChanged(bool val);
    void interfaceWindowButtonsAutoHideTimeoutChanged(int val);
    void interfaceWindowButtonsAutoHideTopEdgeChanged(bool val);
    void interfaceWindowButtonsItemsChanged(QStringList val);
    void interfaceWindowButtonsShowChanged(bool val);
    void interfaceWindowButtonsSizeChanged(int val);
    void interfaceWindowDecorationChanged(bool val);
    void interfaceWindowDecorationOnEmptyBackgroundChanged(bool val);
    void interfaceWindowModeChanged(bool val);

    // table: mainmenu
    void mainmenuElementHeightDynamicChanged(bool val);
    void mainmenuElementPositionChanged(QPoint val);
    void mainmenuElementSizeChanged(QSize val);
    void mainmenuElementWidthChanged(int val);
    void mainmenuShowExternalChanged(bool val);

    // table: mapview
    void mapviewCurrentPositionChanged(QPoint val);
    void mapviewCurrentSizeChanged(QSize val);
    void mapviewCurrentVisibleChanged(bool val);
    void mapviewExplorerThumbnailsScaleCropChanged(bool val);
    void mapviewExplorerThumbnailsZoomLevelChanged(int val);

    // table: metadata
    void metadataAutoRotationChanged(bool val);
    void metadataCopyrightChanged(bool val);
    void metadataDimensionsChanged(bool val);
    void metadataElementFloatingChanged(bool val);
    void metadataElementHeightDynamicChanged(bool val);
    void metadataElementPositionChanged(QPoint val);
    void metadataElementSizeChanged(QSize val);
    void metadataElementVisibleChanged(bool val);
    void metadataExposureTimeChanged(bool val);
    void metadataFLengthChanged(bool val);
    void metadataFNumberChanged(bool val);
    void metadataFaceTagsBorderChanged(bool val);
    void metadataFaceTagsBorderColorChanged(QString val);
    void metadataFaceTagsBorderWidthChanged(int val);
    void metadataFaceTagsEnabledChanged(bool val);
    void metadataFaceTagsFontSizeChanged(int val);
    void metadataFaceTagsVisibilityChanged(int val);
    void metadataFileSizeChanged(bool val);
    void metadataFileTypeChanged(bool val);
    void metadataFilenameChanged(bool val);
    void metadataFlashChanged(bool val);
    void metadataGpsChanged(bool val);
    void metadataGpsMapChanged(QString val);
    void metadataImageNumberChanged(bool val);
    void metadataIsoChanged(bool val);
    void metadataKeywordsChanged(bool val);
    void metadataLightSourceChanged(bool val);
    void metadataLocationChanged(bool val);
    void metadataMakeChanged(bool val);
    void metadataModelChanged(bool val);
    void metadataSceneTypeChanged(bool val);
    void metadataSoftwareChanged(bool val);
    void metadataTimeChanged(bool val);

    // table: slideshow
    void slideshowHideLabelsChanged(bool val);
    void slideshowHideWindowButtonsChanged(bool val);
    void slideshowImageTransitionChanged(int val);
    void slideshowIncludeSubFoldersChanged(bool val);
    void slideshowLoopChanged(bool val);
    void slideshowMusicChanged(bool val);
    void slideshowMusicFileChanged(QString val);
    void slideshowMusicFilesChanged(QStringList val);
    void slideshowMusicShuffleChanged(bool val);
    void slideshowMusicVolumeVideosChanged(int val);
    void slideshowShuffleChanged(bool val);
    void slideshowTimeChanged(int val);
    void slideshowTypeAnimationChanged(QString val);

    // table: thumbnails
    void thumbnailsCacheChanged(bool val);
    void thumbnailsCacheBaseDirDefaultChanged(bool val);
    void thumbnailsCacheBaseDirLocationChanged(QString val);
    void thumbnailsCenterOnActiveChanged(bool val);
    void thumbnailsCropToFitChanged(bool val);
    void thumbnailsDisableChanged(bool val);
    void thumbnailsExcludeDropBoxChanged(QString val);
    void thumbnailsExcludeFoldersChanged(QStringList val);
    void thumbnailsExcludeNetworkSharesChanged(bool val);
    void thumbnailsExcludeNextcloudChanged(QString val);
    void thumbnailsExcludeOwnCloudChanged(QString val);
    void thumbnailsFilenameChanged(bool val);
    void thumbnailsFontSizeChanged(int val);
    void thumbnailsHighlightAnimationChanged(QStringList val);
    void thumbnailsHighlightAnimationLiftUpChanged(int val);
    void thumbnailsIconsOnlyChanged(bool val);
    void thumbnailsInactiveTransparentChanged(bool val);
    void thumbnailsMaxNumberThreadsChanged(int val);
    void thumbnailsSameHeightVaryWidthChanged(bool val);
    void thumbnailsSizeChanged(int val);
    void thumbnailsSmallThumbnailsKeepSmallChanged(bool val);
    void thumbnailsSpacingChanged(int val);
    void thumbnailsTooltipChanged(bool val);
    void thumbnailsVisibilityChanged(int val);

};

#endif

